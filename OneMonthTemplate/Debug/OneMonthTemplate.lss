
OneMonthTemplate.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000043a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  0000048e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000048e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004c0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000128  00000000  00000000  00000500  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00008e3b  00000000  00000000  00000628  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000441a  00000000  00000000  00009463  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000023e1  00000000  00000000  0000d87d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000024c  00000000  00000000  0000fc60  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000324a0  00000000  00000000  0000feac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005ee  00000000  00000000  0004234c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  0004293a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000010b3  00000000  00000000  000429f2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
   2:	00 00       	nop
   4:	09 c1       	rjmp	.+530    	; 0x218 <__bad_interrupt>
   6:	00 00       	nop
   8:	07 c1       	rjmp	.+526    	; 0x218 <__bad_interrupt>
   a:	00 00       	nop
   c:	05 c1       	rjmp	.+522    	; 0x218 <__bad_interrupt>
   e:	00 00       	nop
  10:	03 c1       	rjmp	.+518    	; 0x218 <__bad_interrupt>
  12:	00 00       	nop
  14:	01 c1       	rjmp	.+514    	; 0x218 <__bad_interrupt>
  16:	00 00       	nop
  18:	ff c0       	rjmp	.+510    	; 0x218 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	fd c0       	rjmp	.+506    	; 0x218 <__bad_interrupt>
  1e:	00 00       	nop
  20:	fb c0       	rjmp	.+502    	; 0x218 <__bad_interrupt>
  22:	00 00       	nop
  24:	f9 c0       	rjmp	.+498    	; 0x218 <__bad_interrupt>
  26:	00 00       	nop
  28:	f7 c0       	rjmp	.+494    	; 0x218 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	f5 c0       	rjmp	.+490    	; 0x218 <__bad_interrupt>
  2e:	00 00       	nop
  30:	f3 c0       	rjmp	.+486    	; 0x218 <__bad_interrupt>
  32:	00 00       	nop
  34:	f1 c0       	rjmp	.+482    	; 0x218 <__bad_interrupt>
  36:	00 00       	nop
  38:	12 c1       	rjmp	.+548    	; 0x25e <__vector_14>
  3a:	00 00       	nop
  3c:	ed c0       	rjmp	.+474    	; 0x218 <__bad_interrupt>
  3e:	00 00       	nop
  40:	eb c0       	rjmp	.+470    	; 0x218 <__bad_interrupt>
  42:	00 00       	nop
  44:	e9 c0       	rjmp	.+466    	; 0x218 <__bad_interrupt>
  46:	00 00       	nop
  48:	e7 c0       	rjmp	.+462    	; 0x218 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	e5 c0       	rjmp	.+458    	; 0x218 <__bad_interrupt>
  4e:	00 00       	nop
  50:	e3 c0       	rjmp	.+454    	; 0x218 <__bad_interrupt>
  52:	00 00       	nop
  54:	e1 c0       	rjmp	.+450    	; 0x218 <__bad_interrupt>
  56:	00 00       	nop
  58:	df c0       	rjmp	.+446    	; 0x218 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	dd c0       	rjmp	.+442    	; 0x218 <__bad_interrupt>
  5e:	00 00       	nop
  60:	db c0       	rjmp	.+438    	; 0x218 <__bad_interrupt>
  62:	00 00       	nop
  64:	d9 c0       	rjmp	.+434    	; 0x218 <__bad_interrupt>
  66:	00 00       	nop
  68:	d7 c0       	rjmp	.+430    	; 0x218 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	d5 c0       	rjmp	.+426    	; 0x218 <__bad_interrupt>
  6e:	00 00       	nop
  70:	d3 c0       	rjmp	.+422    	; 0x218 <__bad_interrupt>
  72:	00 00       	nop
  74:	d1 c0       	rjmp	.+418    	; 0x218 <__bad_interrupt>
  76:	00 00       	nop
  78:	cf c0       	rjmp	.+414    	; 0x218 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	cd c0       	rjmp	.+410    	; 0x218 <__bad_interrupt>
  7e:	00 00       	nop
  80:	cb c0       	rjmp	.+406    	; 0x218 <__bad_interrupt>
  82:	00 00       	nop
  84:	c9 c0       	rjmp	.+402    	; 0x218 <__bad_interrupt>
  86:	00 00       	nop
  88:	c7 c0       	rjmp	.+398    	; 0x218 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	c5 c0       	rjmp	.+394    	; 0x218 <__bad_interrupt>
  8e:	00 00       	nop
  90:	c3 c0       	rjmp	.+390    	; 0x218 <__bad_interrupt>
  92:	00 00       	nop
  94:	c1 c0       	rjmp	.+386    	; 0x218 <__bad_interrupt>
  96:	00 00       	nop
  98:	bf c0       	rjmp	.+382    	; 0x218 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	bd c0       	rjmp	.+378    	; 0x218 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	bb c0       	rjmp	.+374    	; 0x218 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	b9 c0       	rjmp	.+370    	; 0x218 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	b7 c0       	rjmp	.+366    	; 0x218 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	b5 c0       	rjmp	.+362    	; 0x218 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	b3 c0       	rjmp	.+358    	; 0x218 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	b1 c0       	rjmp	.+354    	; 0x218 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	af c0       	rjmp	.+350    	; 0x218 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	ae c0       	rjmp	.+348    	; 0x21a <__vector_47>
  be:	00 00       	nop
  c0:	ab c0       	rjmp	.+342    	; 0x218 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	a9 c0       	rjmp	.+338    	; 0x218 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	a7 c0       	rjmp	.+334    	; 0x218 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	a5 c0       	rjmp	.+330    	; 0x218 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	a3 c0       	rjmp	.+326    	; 0x218 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	a1 c0       	rjmp	.+322    	; 0x218 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	9f c0       	rjmp	.+318    	; 0x218 <__bad_interrupt>
  da:	00 00       	nop
  dc:	9d c0       	rjmp	.+314    	; 0x218 <__bad_interrupt>
  de:	00 00       	nop
  e0:	9b c0       	rjmp	.+310    	; 0x218 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	99 c0       	rjmp	.+306    	; 0x218 <__bad_interrupt>
  e6:	00 00       	nop
  e8:	97 c0       	rjmp	.+302    	; 0x218 <__bad_interrupt>
  ea:	00 00       	nop
  ec:	95 c0       	rjmp	.+298    	; 0x218 <__bad_interrupt>
  ee:	00 00       	nop
  f0:	93 c0       	rjmp	.+294    	; 0x218 <__bad_interrupt>
  f2:	00 00       	nop
  f4:	91 c0       	rjmp	.+290    	; 0x218 <__bad_interrupt>
  f6:	00 00       	nop
  f8:	8f c0       	rjmp	.+286    	; 0x218 <__bad_interrupt>
  fa:	00 00       	nop
  fc:	8d c0       	rjmp	.+282    	; 0x218 <__bad_interrupt>
  fe:	00 00       	nop
 100:	8b c0       	rjmp	.+278    	; 0x218 <__bad_interrupt>
 102:	00 00       	nop
 104:	89 c0       	rjmp	.+274    	; 0x218 <__bad_interrupt>
 106:	00 00       	nop
 108:	27 c1       	rjmp	.+590    	; 0x358 <__vector_66>
 10a:	00 00       	nop
 10c:	85 c0       	rjmp	.+266    	; 0x218 <__bad_interrupt>
 10e:	00 00       	nop
 110:	83 c0       	rjmp	.+262    	; 0x218 <__bad_interrupt>
 112:	00 00       	nop
 114:	81 c0       	rjmp	.+258    	; 0x218 <__bad_interrupt>
 116:	00 00       	nop
 118:	7f c0       	rjmp	.+254    	; 0x218 <__bad_interrupt>
 11a:	00 00       	nop
 11c:	7d c0       	rjmp	.+250    	; 0x218 <__bad_interrupt>
 11e:	00 00       	nop
 120:	7b c0       	rjmp	.+246    	; 0x218 <__bad_interrupt>
 122:	00 00       	nop
 124:	79 c0       	rjmp	.+242    	; 0x218 <__bad_interrupt>
 126:	00 00       	nop
 128:	77 c0       	rjmp	.+238    	; 0x218 <__bad_interrupt>
 12a:	00 00       	nop
 12c:	75 c0       	rjmp	.+234    	; 0x218 <__bad_interrupt>
 12e:	00 00       	nop
 130:	73 c0       	rjmp	.+230    	; 0x218 <__bad_interrupt>
 132:	00 00       	nop
 134:	96 c0       	rjmp	.+300    	; 0x262 <__vector_77>
 136:	00 00       	nop
 138:	6f c0       	rjmp	.+222    	; 0x218 <__bad_interrupt>
 13a:	00 00       	nop
 13c:	6d c0       	rjmp	.+218    	; 0x218 <__bad_interrupt>
 13e:	00 00       	nop
 140:	6b c0       	rjmp	.+214    	; 0x218 <__bad_interrupt>
 142:	00 00       	nop
 144:	69 c0       	rjmp	.+210    	; 0x218 <__bad_interrupt>
 146:	00 00       	nop
 148:	67 c0       	rjmp	.+206    	; 0x218 <__bad_interrupt>
 14a:	00 00       	nop
 14c:	65 c0       	rjmp	.+202    	; 0x218 <__bad_interrupt>
 14e:	00 00       	nop
 150:	63 c0       	rjmp	.+198    	; 0x218 <__bad_interrupt>
 152:	00 00       	nop
 154:	61 c0       	rjmp	.+194    	; 0x218 <__bad_interrupt>
 156:	00 00       	nop
 158:	5f c0       	rjmp	.+190    	; 0x218 <__bad_interrupt>
 15a:	00 00       	nop
 15c:	5d c0       	rjmp	.+186    	; 0x218 <__bad_interrupt>
 15e:	00 00       	nop
 160:	5b c0       	rjmp	.+182    	; 0x218 <__bad_interrupt>
 162:	00 00       	nop
 164:	59 c0       	rjmp	.+178    	; 0x218 <__bad_interrupt>
 166:	00 00       	nop
 168:	57 c0       	rjmp	.+174    	; 0x218 <__bad_interrupt>
 16a:	00 00       	nop
 16c:	55 c0       	rjmp	.+170    	; 0x218 <__bad_interrupt>
 16e:	00 00       	nop
 170:	53 c0       	rjmp	.+166    	; 0x218 <__bad_interrupt>
 172:	00 00       	nop
 174:	51 c0       	rjmp	.+162    	; 0x218 <__bad_interrupt>
 176:	00 00       	nop
 178:	4f c0       	rjmp	.+158    	; 0x218 <__bad_interrupt>
 17a:	00 00       	nop
 17c:	4d c0       	rjmp	.+154    	; 0x218 <__bad_interrupt>
 17e:	00 00       	nop
 180:	4b c0       	rjmp	.+150    	; 0x218 <__bad_interrupt>
 182:	00 00       	nop
 184:	49 c0       	rjmp	.+146    	; 0x218 <__bad_interrupt>
 186:	00 00       	nop
 188:	47 c0       	rjmp	.+142    	; 0x218 <__bad_interrupt>
 18a:	00 00       	nop
 18c:	45 c0       	rjmp	.+138    	; 0x218 <__bad_interrupt>
 18e:	00 00       	nop
 190:	43 c0       	rjmp	.+134    	; 0x218 <__bad_interrupt>
 192:	00 00       	nop
 194:	41 c0       	rjmp	.+130    	; 0x218 <__bad_interrupt>
 196:	00 00       	nop
 198:	3f c0       	rjmp	.+126    	; 0x218 <__bad_interrupt>
 19a:	00 00       	nop
 19c:	3d c0       	rjmp	.+122    	; 0x218 <__bad_interrupt>
 19e:	00 00       	nop
 1a0:	3b c0       	rjmp	.+118    	; 0x218 <__bad_interrupt>
 1a2:	00 00       	nop
 1a4:	39 c0       	rjmp	.+114    	; 0x218 <__bad_interrupt>
 1a6:	00 00       	nop
 1a8:	37 c0       	rjmp	.+110    	; 0x218 <__bad_interrupt>
 1aa:	00 00       	nop
 1ac:	35 c0       	rjmp	.+106    	; 0x218 <__bad_interrupt>
 1ae:	00 00       	nop
 1b0:	57 c0       	rjmp	.+174    	; 0x260 <__vector_108>
 1b2:	00 00       	nop
 1b4:	31 c0       	rjmp	.+98     	; 0x218 <__bad_interrupt>
 1b6:	00 00       	nop
 1b8:	2f c0       	rjmp	.+94     	; 0x218 <__bad_interrupt>
 1ba:	00 00       	nop
 1bc:	2d c0       	rjmp	.+90     	; 0x218 <__bad_interrupt>
 1be:	00 00       	nop
 1c0:	2b c0       	rjmp	.+86     	; 0x218 <__bad_interrupt>
 1c2:	00 00       	nop
 1c4:	29 c0       	rjmp	.+82     	; 0x218 <__bad_interrupt>
 1c6:	00 00       	nop
 1c8:	27 c0       	rjmp	.+78     	; 0x218 <__bad_interrupt>
 1ca:	00 00       	nop
 1cc:	25 c0       	rjmp	.+74     	; 0x218 <__bad_interrupt>
 1ce:	00 00       	nop
 1d0:	23 c0       	rjmp	.+70     	; 0x218 <__bad_interrupt>
 1d2:	00 00       	nop
 1d4:	21 c0       	rjmp	.+66     	; 0x218 <__bad_interrupt>
 1d6:	00 00       	nop
 1d8:	1f c0       	rjmp	.+62     	; 0x218 <__bad_interrupt>
 1da:	00 00       	nop
 1dc:	1d c0       	rjmp	.+58     	; 0x218 <__bad_interrupt>
 1de:	00 00       	nop
 1e0:	1b c0       	rjmp	.+54     	; 0x218 <__bad_interrupt>
 1e2:	00 00       	nop
 1e4:	19 c0       	rjmp	.+50     	; 0x218 <__bad_interrupt>
 1e6:	00 00       	nop
 1e8:	17 c0       	rjmp	.+46     	; 0x218 <__bad_interrupt>
 1ea:	00 00       	nop
 1ec:	15 c0       	rjmp	.+42     	; 0x218 <__bad_interrupt>
 1ee:	00 00       	nop
 1f0:	13 c0       	rjmp	.+38     	; 0x218 <__bad_interrupt>
 1f2:	00 00       	nop
 1f4:	11 c0       	rjmp	.+34     	; 0x218 <__bad_interrupt>
 1f6:	00 00       	nop
 1f8:	0f c0       	rjmp	.+30     	; 0x218 <__bad_interrupt>
	...

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59
 214:	f7 d0       	rcall	.+494    	; 0x404 <main>
 216:	0f c1       	rjmp	.+542    	; 0x436 <_exit>

00000218 <__bad_interrupt>:
 218:	f3 ce       	rjmp	.-538    	; 0x0 <__vectors>

0000021a <__vector_47>:



void timer_counter_change_period(uint16_t period)
{
	TCE0.PER = period;
 21a:	1f 92       	push	r1
 21c:	0f 92       	push	r0
 21e:	0f b6       	in	r0, 0x3f	; 63
 220:	0f 92       	push	r0
 222:	11 24       	eor	r1, r1
 224:	08 b6       	in	r0, 0x38	; 56
 226:	0f 92       	push	r0
 228:	18 be       	out	0x38, r1	; 56
 22a:	0b b6       	in	r0, 0x3b	; 59
 22c:	0f 92       	push	r0
 22e:	1b be       	out	0x3b, r1	; 59
 230:	8f 93       	push	r24
 232:	9f 93       	push	r25
 234:	ef 93       	push	r30
 236:	ff 93       	push	r31
 238:	e0 ec       	ldi	r30, 0xC0	; 192
 23a:	f7 e0       	ldi	r31, 0x07	; 7
 23c:	94 81       	ldd	r25, Z+4	; 0x04
 23e:	88 e0       	ldi	r24, 0x08	; 8
 240:	89 27       	eor	r24, r25
 242:	84 83       	std	Z+4, r24	; 0x04
 244:	ff 91       	pop	r31
 246:	ef 91       	pop	r30
 248:	9f 91       	pop	r25
 24a:	8f 91       	pop	r24
 24c:	0f 90       	pop	r0
 24e:	0b be       	out	0x3b, r0	; 59
 250:	0f 90       	pop	r0
 252:	08 be       	out	0x38, r0	; 56
 254:	0f 90       	pop	r0
 256:	0f be       	out	0x3f, r0	; 63
 258:	0f 90       	pop	r0
 25a:	1f 90       	pop	r1
 25c:	18 95       	reti

0000025e <__vector_14>:
}


ISR_ALIAS(TCC0_OVF_vect, TCE0_OVF_vect);
 25e:	dd cf       	rjmp	.-70     	; 0x21a <__vector_47>

00000260 <__vector_108>:
ISR_ALIAS(TCF0_OVF_vect, TCE0_OVF_vect);
 260:	dc cf       	rjmp	.-72     	; 0x21a <__vector_47>

00000262 <__vector_77>:
 262:	db cf       	rjmp	.-74     	; 0x21a <__vector_47>

00000264 <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
 264:	cf 93       	push	r28
 266:	df 93       	push	r29
 268:	1f 92       	push	r1
 26a:	1f 92       	push	r1
 26c:	cd b7       	in	r28, 0x3d	; 61
 26e:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
 270:	8f ef       	ldi	r24, 0xFF	; 255
 272:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
 276:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
 27a:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
 27e:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
 282:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
 286:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
 28a:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
 28e:	8f b7       	in	r24, 0x3f	; 63
 290:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
 292:	f8 94       	cli
	return flags;
 294:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
 296:	e0 e5       	ldi	r30, 0x50	; 80
 298:	f0 e0       	ldi	r31, 0x00	; 0
 29a:	80 81       	ld	r24, Z
 29c:	82 60       	ori	r24, 0x02	; 2
 29e:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 2a0:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
 2a2:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
 2a4:	81 ff       	sbrs	r24, 1
 2a6:	fd cf       	rjmp	.-6      	; 0x2a2 <sysclk_init+0x3e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
 2a8:	61 e0       	ldi	r22, 0x01	; 1
 2aa:	80 e4       	ldi	r24, 0x40	; 64
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	0f d0       	rcall	.+30     	; 0x2ce <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
 2b0:	8f b7       	in	r24, 0x3f	; 63
 2b2:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
 2b4:	f8 94       	cli
	return flags;
 2b6:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
 2b8:	e0 e5       	ldi	r30, 0x50	; 80
 2ba:	f0 e0       	ldi	r31, 0x00	; 0
 2bc:	80 81       	ld	r24, Z
 2be:	8e 7f       	andi	r24, 0xFE	; 254
 2c0:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 2c2:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
 2c4:	0f 90       	pop	r0
 2c6:	0f 90       	pop	r0
 2c8:	df 91       	pop	r29
 2ca:	cf 91       	pop	r28
 2cc:	08 95       	ret

000002ce <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
 2ce:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
 2d0:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
 2d2:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
 2d4:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
 2d6:	60 83       	st	Z, r22
	ret                             // Return to caller
 2d8:	08 95       	ret

000002da <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
 2da:	cf 93       	push	r28
 2dc:	df 93       	push	r29
 2de:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
 2e0:	20 e0       	ldi	r18, 0x00	; 0
 2e2:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
 2e4:	c6 2f       	mov	r28, r22
 2e6:	d0 e0       	ldi	r29, 0x00	; 0
 2e8:	de 01       	movw	r26, r28
 2ea:	02 2e       	mov	r0, r18
 2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <ioport_configure_port_pin+0x18>
 2ee:	b5 95       	asr	r27
 2f0:	a7 95       	ror	r26
 2f2:	0a 94       	dec	r0
 2f4:	e2 f7       	brpl	.-8      	; 0x2ee <ioport_configure_port_pin+0x14>
 2f6:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
 2f8:	50 8b       	std	Z+16, r21	; 0x10
 2fa:	2f 5f       	subi	r18, 0xFF	; 255
 2fc:	3f 4f       	sbci	r19, 0xFF	; 255
 2fe:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
 300:	28 30       	cpi	r18, 0x08	; 8
 302:	31 05       	cpc	r19, r1
 304:	89 f7       	brne	.-30     	; 0x2e8 <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
 306:	40 ff       	sbrs	r20, 0
 308:	0a c0       	rjmp	.+20     	; 0x31e <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
 30a:	41 ff       	sbrs	r20, 1
 30c:	03 c0       	rjmp	.+6      	; 0x314 <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
 30e:	fc 01       	movw	r30, r24
 310:	65 83       	std	Z+5, r22	; 0x05
 312:	02 c0       	rjmp	.+4      	; 0x318 <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
 314:	fc 01       	movw	r30, r24
 316:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
 318:	fc 01       	movw	r30, r24
 31a:	61 83       	std	Z+1, r22	; 0x01
 31c:	02 c0       	rjmp	.+4      	; 0x322 <ioport_configure_port_pin+0x48>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
 31e:	fc 01       	movw	r30, r24
 320:	62 83       	std	Z+2, r22	; 0x02
	}
}
 322:	df 91       	pop	r29
 324:	cf 91       	pop	r28
 326:	08 95       	ret

00000328 <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
 328:	43 e0       	ldi	r20, 0x03	; 3
 32a:	50 e0       	ldi	r21, 0x00	; 0
 32c:	68 e0       	ldi	r22, 0x08	; 8
 32e:	80 ec       	ldi	r24, 0xC0	; 192
 330:	97 e0       	ldi	r25, 0x07	; 7
 332:	d3 df       	rcall	.-90     	; 0x2da <ioport_configure_port_pin>
 334:	40 e0       	ldi	r20, 0x00	; 0
 336:	58 e1       	ldi	r21, 0x18	; 24
 338:	64 e0       	ldi	r22, 0x04	; 4
 33a:	80 ec       	ldi	r24, 0xC0	; 192
 33c:	97 e0       	ldi	r25, 0x07	; 7
 33e:	cd cf       	rjmp	.-102    	; 0x2da <ioport_configure_port_pin>
 340:	08 95       	ret

00000342 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
 342:	04 c0       	rjmp	.+8      	; 0x34c <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
 344:	61 50       	subi	r22, 0x01	; 1
 346:	71 09       	sbc	r23, r1
 348:	81 09       	sbc	r24, r1
 34a:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
 34c:	61 15       	cp	r22, r1
 34e:	71 05       	cpc	r23, r1
 350:	81 05       	cpc	r24, r1
 352:	91 05       	cpc	r25, r1
 354:	b9 f7       	brne	.-18     	; 0x344 <__portable_avr_delay_cycles+0x2>
 356:	08 95       	ret

00000358 <__vector_66>:
	
	//never go here pls
}

ISR(PORTA_INT0_vect)
{
 358:	1f 92       	push	r1
 35a:	0f 92       	push	r0
 35c:	0f b6       	in	r0, 0x3f	; 63
 35e:	0f 92       	push	r0
 360:	11 24       	eor	r1, r1
 362:	08 b6       	in	r0, 0x38	; 56
 364:	0f 92       	push	r0
 366:	18 be       	out	0x38, r1	; 56
 368:	09 b6       	in	r0, 0x39	; 57
 36a:	0f 92       	push	r0
 36c:	19 be       	out	0x39, r1	; 57
 36e:	0a b6       	in	r0, 0x3a	; 58
 370:	0f 92       	push	r0
 372:	1a be       	out	0x3a, r1	; 58
 374:	0b b6       	in	r0, 0x3b	; 59
 376:	0f 92       	push	r0
 378:	1b be       	out	0x3b, r1	; 59
 37a:	2f 93       	push	r18
 37c:	3f 93       	push	r19
 37e:	4f 93       	push	r20
 380:	5f 93       	push	r21
 382:	6f 93       	push	r22
 384:	7f 93       	push	r23
 386:	8f 93       	push	r24
 388:	9f 93       	push	r25
 38a:	af 93       	push	r26
 38c:	bf 93       	push	r27
 38e:	cf 93       	push	r28
 390:	df 93       	push	r29
 392:	ef 93       	push	r30
 394:	ff 93       	push	r31
	PORTE.OUT ^= 0xFF; // Toggle the LEDs on PortQ
 396:	c0 e8       	ldi	r28, 0x80	; 128
 398:	d6 e0       	ldi	r29, 0x06	; 6
 39a:	8c 81       	ldd	r24, Y+4	; 0x04
 39c:	80 95       	com	r24
 39e:	8c 83       	std	Y+4, r24	; 0x04
	delay_ms(100);
 3a0:	66 e5       	ldi	r22, 0x56	; 86
 3a2:	73 e2       	ldi	r23, 0x23	; 35
 3a4:	88 e0       	ldi	r24, 0x08	; 8
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	cc df       	rcall	.-104    	; 0x342 <__portable_avr_delay_cycles>
	PORTE.OUT ^= 0xFF;
 3aa:	8c 81       	ldd	r24, Y+4	; 0x04
 3ac:	80 95       	com	r24
 3ae:	8c 83       	std	Y+4, r24	; 0x04
}
 3b0:	ff 91       	pop	r31
 3b2:	ef 91       	pop	r30
 3b4:	df 91       	pop	r29
 3b6:	cf 91       	pop	r28
 3b8:	bf 91       	pop	r27
 3ba:	af 91       	pop	r26
 3bc:	9f 91       	pop	r25
 3be:	8f 91       	pop	r24
 3c0:	7f 91       	pop	r23
 3c2:	6f 91       	pop	r22
 3c4:	5f 91       	pop	r21
 3c6:	4f 91       	pop	r20
 3c8:	3f 91       	pop	r19
 3ca:	2f 91       	pop	r18
 3cc:	0f 90       	pop	r0
 3ce:	0b be       	out	0x3b, r0	; 59
 3d0:	0f 90       	pop	r0
 3d2:	0a be       	out	0x3a, r0	; 58
 3d4:	0f 90       	pop	r0
 3d6:	09 be       	out	0x39, r0	; 57
 3d8:	0f 90       	pop	r0
 3da:	08 be       	out	0x38, r0	; 56
 3dc:	0f 90       	pop	r0
 3de:	0f be       	out	0x3f, r0	; 63
 3e0:	0f 90       	pop	r0
 3e2:	1f 90       	pop	r1
 3e4:	18 95       	reti

000003e6 <initialize_interrupt>:

void initialize_interrupt(void)
{
	/* Initialization for all interrupts */
	PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm; // Allow low, medium, high level interrupts
 3e6:	87 e0       	ldi	r24, 0x07	; 7
 3e8:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	sei(); //set enable interrupts
 3ec:	78 94       	sei
	
	/* Initialize Port A Pin 0 interrupt */
	PORTA.DIR &= ~0x01; // Set pin 0 to input
 3ee:	e0 e0       	ldi	r30, 0x00	; 0
 3f0:	f6 e0       	ldi	r31, 0x06	; 6
 3f2:	80 81       	ld	r24, Z
 3f4:	8e 7f       	andi	r24, 0xFE	; 254
 3f6:	80 83       	st	Z, r24
	PORTA.PIN0CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FALLING_gc; // Enable pullup group configuration and falling-edge interrupts on port A pin 0
 3f8:	8a e1       	ldi	r24, 0x1A	; 26
 3fa:	80 8b       	std	Z+16, r24	; 0x10
	PORTA.INT0MASK = 0x01; // Mask interrupt 0 (INT0) to pin 0.
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	82 87       	std	Z+10, r24	; 0x0a
	PORTA.INTCTRL = PORT_INT0LVL_LO_gc; // Set the level of interrupt 0 to low.
 400:	81 87       	std	Z+9, r24	; 0x09
 402:	08 95       	ret

00000404 <main>:

void initialize_interrupt(void);

int main (void)
{
	board_init();
 404:	91 df       	rcall	.-222    	; 0x328 <board_init>

	/* Insert application code here, after the board has been initialized. */
	sysclk_init();
 406:	2e df       	rcall	.-420    	; 0x264 <sysclk_init>
 408:	e0 e8       	ldi	r30, 0x80	; 128
// 	
// 	
// 	sei();
// 	
// 	PORTQ.DIR = 0x08; // sets the LED on PORTQ pin 3 to output	
	PORTE.DIR = 0xFF;
 40a:	f6 e0       	ldi	r31, 0x06	; 6
 40c:	8f ef       	ldi	r24, 0xFF	; 255
 40e:	80 83       	st	Z, r24
	PORTE.OUT = 0xFF;
 410:	84 83       	std	Z+4, r24	; 0x04
	initialize_interrupt();
 412:	e9 df       	rcall	.-46     	; 0x3e6 <initialize_interrupt>
 414:	c0 e8       	ldi	r28, 0x80	; 128
	
	/* infinite loop */
	for(;;)
	{
		PORTE.OUT = 0x00;
 416:	d6 e0       	ldi	r29, 0x06	; 6
 418:	1f ef       	ldi	r17, 0xFF	; 255
		delay_ms(2000);
		PORTE.OUT |= 0xFF;
 41a:	1c 82       	std	Y+4, r1	; 0x04
	initialize_interrupt();
	
	/* infinite loop */
	for(;;)
	{
		PORTE.OUT = 0x00;
 41c:	6c ea       	ldi	r22, 0xAC	; 172
		delay_ms(2000);
 41e:	72 ec       	ldi	r23, 0xC2	; 194
 420:	82 ea       	ldi	r24, 0xA2	; 162
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	8e df       	rcall	.-228    	; 0x342 <__portable_avr_delay_cycles>
 426:	8c 81       	ldd	r24, Y+4	; 0x04
		PORTE.OUT |= 0xFF;
 428:	1c 83       	std	Y+4, r17	; 0x04
 42a:	6c ea       	ldi	r22, 0xAC	; 172
		delay_ms(2000);
 42c:	72 ec       	ldi	r23, 0xC2	; 194
 42e:	82 ea       	ldi	r24, 0xA2	; 162
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	87 df       	rcall	.-242    	; 0x342 <__portable_avr_delay_cycles>
 434:	f2 cf       	rjmp	.-28     	; 0x41a <main+0x16>

00000436 <_exit>:
 436:	f8 94       	cli

00000438 <__stop_program>:
 438:	ff cf       	rjmp	.-2      	; 0x438 <__stop_program>


OneMonthTemplate.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e22  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00802000  00000e22  00000eb6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  0080201a  0080201a  00000ed0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ed0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f00  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d8  00000000  00000000  00000f40  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000e71f  00000000  00000000  00001118  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004d03  00000000  00000000  0000f837  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000042e6  00000000  00000000  0001453a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000042c  00000000  00000000  00018820  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00033149  00000000  00000000  00018c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001657  00000000  00000000  0004bd95  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  0004d3ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000018b1  00000000  00000000  0004d54c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
   2:	00 00       	nop
   4:	1f c1       	rjmp	.+574    	; 0x244 <__bad_interrupt>
   6:	00 00       	nop
   8:	1d c1       	rjmp	.+570    	; 0x244 <__bad_interrupt>
   a:	00 00       	nop
   c:	1b c1       	rjmp	.+566    	; 0x244 <__bad_interrupt>
   e:	00 00       	nop
  10:	19 c1       	rjmp	.+562    	; 0x244 <__bad_interrupt>
  12:	00 00       	nop
  14:	17 c1       	rjmp	.+558    	; 0x244 <__bad_interrupt>
  16:	00 00       	nop
  18:	15 c1       	rjmp	.+554    	; 0x244 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	13 c1       	rjmp	.+550    	; 0x244 <__bad_interrupt>
  1e:	00 00       	nop
  20:	11 c1       	rjmp	.+546    	; 0x244 <__bad_interrupt>
  22:	00 00       	nop
  24:	0f c1       	rjmp	.+542    	; 0x244 <__bad_interrupt>
  26:	00 00       	nop
  28:	0d c1       	rjmp	.+538    	; 0x244 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	0b c1       	rjmp	.+534    	; 0x244 <__bad_interrupt>
  2e:	00 00       	nop
  30:	09 c1       	rjmp	.+530    	; 0x244 <__bad_interrupt>
  32:	00 00       	nop
  34:	07 c1       	rjmp	.+526    	; 0x244 <__bad_interrupt>
  36:	00 00       	nop
  38:	05 c1       	rjmp	.+522    	; 0x244 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	03 c1       	rjmp	.+518    	; 0x244 <__bad_interrupt>
  3e:	00 00       	nop
  40:	01 c1       	rjmp	.+514    	; 0x244 <__bad_interrupt>
  42:	00 00       	nop
  44:	ff c0       	rjmp	.+510    	; 0x244 <__bad_interrupt>
  46:	00 00       	nop
  48:	fd c0       	rjmp	.+506    	; 0x244 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	fb c0       	rjmp	.+502    	; 0x244 <__bad_interrupt>
  4e:	00 00       	nop
  50:	f9 c0       	rjmp	.+498    	; 0x244 <__bad_interrupt>
  52:	00 00       	nop
  54:	f7 c0       	rjmp	.+494    	; 0x244 <__bad_interrupt>
  56:	00 00       	nop
  58:	f5 c0       	rjmp	.+490    	; 0x244 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	f3 c0       	rjmp	.+486    	; 0x244 <__bad_interrupt>
  5e:	00 00       	nop
  60:	f1 c0       	rjmp	.+482    	; 0x244 <__bad_interrupt>
  62:	00 00       	nop
  64:	ef c0       	rjmp	.+478    	; 0x244 <__bad_interrupt>
  66:	00 00       	nop
  68:	ed c0       	rjmp	.+474    	; 0x244 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	eb c0       	rjmp	.+470    	; 0x244 <__bad_interrupt>
  6e:	00 00       	nop
  70:	e9 c0       	rjmp	.+466    	; 0x244 <__bad_interrupt>
  72:	00 00       	nop
  74:	e7 c0       	rjmp	.+462    	; 0x244 <__bad_interrupt>
  76:	00 00       	nop
  78:	e5 c0       	rjmp	.+458    	; 0x244 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	e3 c0       	rjmp	.+454    	; 0x244 <__bad_interrupt>
  7e:	00 00       	nop
  80:	e1 c0       	rjmp	.+450    	; 0x244 <__bad_interrupt>
  82:	00 00       	nop
  84:	df c0       	rjmp	.+446    	; 0x244 <__bad_interrupt>
  86:	00 00       	nop
  88:	dd c0       	rjmp	.+442    	; 0x244 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	db c0       	rjmp	.+438    	; 0x244 <__bad_interrupt>
  8e:	00 00       	nop
  90:	d9 c0       	rjmp	.+434    	; 0x244 <__bad_interrupt>
  92:	00 00       	nop
  94:	d7 c0       	rjmp	.+430    	; 0x244 <__bad_interrupt>
  96:	00 00       	nop
  98:	d5 c0       	rjmp	.+426    	; 0x244 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	d3 c0       	rjmp	.+422    	; 0x244 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	d1 c0       	rjmp	.+418    	; 0x244 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	cf c0       	rjmp	.+414    	; 0x244 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	cd c0       	rjmp	.+410    	; 0x244 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	cb c0       	rjmp	.+406    	; 0x244 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	c9 c0       	rjmp	.+402    	; 0x244 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	c7 c0       	rjmp	.+398    	; 0x244 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	c5 c0       	rjmp	.+394    	; 0x244 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	cc c3       	rjmp	.+1944   	; 0x856 <__vector_47>
  be:	00 00       	nop
  c0:	c1 c0       	rjmp	.+386    	; 0x244 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	bf c0       	rjmp	.+382    	; 0x244 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	bd c0       	rjmp	.+378    	; 0x244 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	bb c0       	rjmp	.+374    	; 0x244 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	b9 c0       	rjmp	.+370    	; 0x244 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	b7 c0       	rjmp	.+366    	; 0x244 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	b5 c0       	rjmp	.+362    	; 0x244 <__bad_interrupt>
  da:	00 00       	nop
  dc:	b3 c0       	rjmp	.+358    	; 0x244 <__bad_interrupt>
  de:	00 00       	nop
  e0:	b1 c0       	rjmp	.+354    	; 0x244 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	af c0       	rjmp	.+350    	; 0x244 <__bad_interrupt>
  e6:	00 00       	nop
  e8:	ad c0       	rjmp	.+346    	; 0x244 <__bad_interrupt>
  ea:	00 00       	nop
  ec:	ab c0       	rjmp	.+342    	; 0x244 <__bad_interrupt>
  ee:	00 00       	nop
  f0:	a9 c0       	rjmp	.+338    	; 0x244 <__bad_interrupt>
  f2:	00 00       	nop
  f4:	a7 c0       	rjmp	.+334    	; 0x244 <__bad_interrupt>
  f6:	00 00       	nop
  f8:	a5 c0       	rjmp	.+330    	; 0x244 <__bad_interrupt>
  fa:	00 00       	nop
  fc:	a3 c0       	rjmp	.+326    	; 0x244 <__bad_interrupt>
  fe:	00 00       	nop
 100:	a1 c0       	rjmp	.+322    	; 0x244 <__bad_interrupt>
 102:	00 00       	nop
 104:	9f c0       	rjmp	.+318    	; 0x244 <__bad_interrupt>
 106:	00 00       	nop
 108:	62 c4       	rjmp	.+2244   	; 0x9ce <__vector_66>
 10a:	00 00       	nop
 10c:	9b c0       	rjmp	.+310    	; 0x244 <__bad_interrupt>
 10e:	00 00       	nop
 110:	99 c0       	rjmp	.+306    	; 0x244 <__bad_interrupt>
 112:	00 00       	nop
 114:	97 c0       	rjmp	.+302    	; 0x244 <__bad_interrupt>
 116:	00 00       	nop
 118:	95 c0       	rjmp	.+298    	; 0x244 <__bad_interrupt>
 11a:	00 00       	nop
 11c:	93 c0       	rjmp	.+294    	; 0x244 <__bad_interrupt>
 11e:	00 00       	nop
 120:	91 c0       	rjmp	.+290    	; 0x244 <__bad_interrupt>
 122:	00 00       	nop
 124:	8f c0       	rjmp	.+286    	; 0x244 <__bad_interrupt>
 126:	00 00       	nop
 128:	8d c0       	rjmp	.+282    	; 0x244 <__bad_interrupt>
 12a:	00 00       	nop
 12c:	8b c0       	rjmp	.+278    	; 0x244 <__bad_interrupt>
 12e:	00 00       	nop
 130:	89 c0       	rjmp	.+274    	; 0x244 <__bad_interrupt>
 132:	00 00       	nop
 134:	87 c0       	rjmp	.+270    	; 0x244 <__bad_interrupt>
 136:	00 00       	nop
 138:	85 c0       	rjmp	.+266    	; 0x244 <__bad_interrupt>
 13a:	00 00       	nop
 13c:	83 c0       	rjmp	.+262    	; 0x244 <__bad_interrupt>
 13e:	00 00       	nop
 140:	81 c0       	rjmp	.+258    	; 0x244 <__bad_interrupt>
 142:	00 00       	nop
 144:	7f c0       	rjmp	.+254    	; 0x244 <__bad_interrupt>
 146:	00 00       	nop
 148:	7d c0       	rjmp	.+250    	; 0x244 <__bad_interrupt>
 14a:	00 00       	nop
 14c:	7b c0       	rjmp	.+246    	; 0x244 <__bad_interrupt>
 14e:	00 00       	nop
 150:	79 c0       	rjmp	.+242    	; 0x244 <__bad_interrupt>
 152:	00 00       	nop
 154:	77 c0       	rjmp	.+238    	; 0x244 <__bad_interrupt>
 156:	00 00       	nop
 158:	75 c0       	rjmp	.+234    	; 0x244 <__bad_interrupt>
 15a:	00 00       	nop
 15c:	73 c0       	rjmp	.+230    	; 0x244 <__bad_interrupt>
 15e:	00 00       	nop
 160:	71 c0       	rjmp	.+226    	; 0x244 <__bad_interrupt>
 162:	00 00       	nop
 164:	6f c0       	rjmp	.+222    	; 0x244 <__bad_interrupt>
 166:	00 00       	nop
 168:	6d c0       	rjmp	.+218    	; 0x244 <__bad_interrupt>
 16a:	00 00       	nop
 16c:	6b c0       	rjmp	.+214    	; 0x244 <__bad_interrupt>
 16e:	00 00       	nop
 170:	69 c0       	rjmp	.+210    	; 0x244 <__bad_interrupt>
 172:	00 00       	nop
 174:	67 c0       	rjmp	.+206    	; 0x244 <__bad_interrupt>
 176:	00 00       	nop
 178:	65 c0       	rjmp	.+202    	; 0x244 <__bad_interrupt>
 17a:	00 00       	nop
 17c:	63 c0       	rjmp	.+198    	; 0x244 <__bad_interrupt>
 17e:	00 00       	nop
 180:	61 c0       	rjmp	.+194    	; 0x244 <__bad_interrupt>
 182:	00 00       	nop
 184:	5f c0       	rjmp	.+190    	; 0x244 <__bad_interrupt>
 186:	00 00       	nop
 188:	5d c0       	rjmp	.+186    	; 0x244 <__bad_interrupt>
 18a:	00 00       	nop
 18c:	5b c0       	rjmp	.+182    	; 0x244 <__bad_interrupt>
 18e:	00 00       	nop
 190:	59 c0       	rjmp	.+178    	; 0x244 <__bad_interrupt>
 192:	00 00       	nop
 194:	57 c0       	rjmp	.+174    	; 0x244 <__bad_interrupt>
 196:	00 00       	nop
 198:	55 c0       	rjmp	.+170    	; 0x244 <__bad_interrupt>
 19a:	00 00       	nop
 19c:	53 c0       	rjmp	.+166    	; 0x244 <__bad_interrupt>
 19e:	00 00       	nop
 1a0:	51 c0       	rjmp	.+162    	; 0x244 <__bad_interrupt>
 1a2:	00 00       	nop
 1a4:	4f c0       	rjmp	.+158    	; 0x244 <__bad_interrupt>
 1a6:	00 00       	nop
 1a8:	4d c0       	rjmp	.+154    	; 0x244 <__bad_interrupt>
 1aa:	00 00       	nop
 1ac:	4b c0       	rjmp	.+150    	; 0x244 <__bad_interrupt>
 1ae:	00 00       	nop
 1b0:	49 c0       	rjmp	.+146    	; 0x244 <__bad_interrupt>
 1b2:	00 00       	nop
 1b4:	47 c0       	rjmp	.+142    	; 0x244 <__bad_interrupt>
 1b6:	00 00       	nop
 1b8:	45 c0       	rjmp	.+138    	; 0x244 <__bad_interrupt>
 1ba:	00 00       	nop
 1bc:	43 c0       	rjmp	.+134    	; 0x244 <__bad_interrupt>
 1be:	00 00       	nop
 1c0:	41 c0       	rjmp	.+130    	; 0x244 <__bad_interrupt>
 1c2:	00 00       	nop
 1c4:	3f c0       	rjmp	.+126    	; 0x244 <__bad_interrupt>
 1c6:	00 00       	nop
 1c8:	3d c0       	rjmp	.+122    	; 0x244 <__bad_interrupt>
 1ca:	00 00       	nop
 1cc:	3b c0       	rjmp	.+118    	; 0x244 <__bad_interrupt>
 1ce:	00 00       	nop
 1d0:	39 c0       	rjmp	.+114    	; 0x244 <__bad_interrupt>
 1d2:	00 00       	nop
 1d4:	37 c0       	rjmp	.+110    	; 0x244 <__bad_interrupt>
 1d6:	00 00       	nop
 1d8:	35 c0       	rjmp	.+106    	; 0x244 <__bad_interrupt>
 1da:	00 00       	nop
 1dc:	33 c0       	rjmp	.+102    	; 0x244 <__bad_interrupt>
 1de:	00 00       	nop
 1e0:	31 c0       	rjmp	.+98     	; 0x244 <__bad_interrupt>
 1e2:	00 00       	nop
 1e4:	2f c0       	rjmp	.+94     	; 0x244 <__bad_interrupt>
 1e6:	00 00       	nop
 1e8:	2d c0       	rjmp	.+90     	; 0x244 <__bad_interrupt>
 1ea:	00 00       	nop
 1ec:	2b c0       	rjmp	.+86     	; 0x244 <__bad_interrupt>
 1ee:	00 00       	nop
 1f0:	29 c0       	rjmp	.+82     	; 0x244 <__bad_interrupt>
 1f2:	00 00       	nop
 1f4:	27 c0       	rjmp	.+78     	; 0x244 <__bad_interrupt>
 1f6:	00 00       	nop
 1f8:	25 c0       	rjmp	.+74     	; 0x244 <__bad_interrupt>
	...

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
 214:	10 e2       	ldi	r17, 0x20	; 32
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	e2 e2       	ldi	r30, 0x22	; 34
 21c:	fe e0       	ldi	r31, 0x0E	; 14
 21e:	00 e0       	ldi	r16, 0x00	; 0
 220:	0b bf       	out	0x3b, r16	; 59
 222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
 224:	07 90       	elpm	r0, Z+
 226:	0d 92       	st	X+, r0
 228:	aa 31       	cpi	r26, 0x1A	; 26
 22a:	b1 07       	cpc	r27, r17
 22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
 22e:	1b be       	out	0x3b, r1	; 59

00000230 <__do_clear_bss>:
 230:	20 e2       	ldi	r18, 0x20	; 32
 232:	aa e1       	ldi	r26, 0x1A	; 26
 234:	b0 e2       	ldi	r27, 0x20	; 32
 236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
 238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
 23a:	aa 32       	cpi	r26, 0x2A	; 42
 23c:	b2 07       	cpc	r27, r18
 23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
 240:	bc d3       	rcall	.+1912   	; 0x9ba <main>
 242:	ed c5       	rjmp	.+3034   	; 0xe1e <_exit>

00000244 <__bad_interrupt>:
 244:	dd ce       	rjmp	.-582    	; 0x0 <__vectors>

00000246 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
 246:	04 c0       	rjmp	.+8      	; 0x250 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
 248:	61 50       	subi	r22, 0x01	; 1
 24a:	71 09       	sbc	r23, r1
 24c:	81 09       	sbc	r24, r1
 24e:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
 250:	61 15       	cp	r22, r1
 252:	71 05       	cpc	r23, r1
 254:	81 05       	cpc	r24, r1
 256:	91 05       	cpc	r25, r1
 258:	b9 f7       	brne	.-18     	; 0x248 <__portable_avr_delay_cycles+0x2>
 25a:	08 95       	ret

0000025c <usart_serial_getchar>:
 * \param usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
 25c:	cf 93       	push	r28
 25e:	df 93       	push	r29
 260:	eb 01       	movw	r28, r22
	*data = usart_getchar(usart);
 262:	83 d0       	rcall	.+262    	; 0x36a <usart_getchar>
 264:	88 83       	st	Y, r24
}
 266:	df 91       	pop	r29
 268:	cf 91       	pop	r28
 26a:	08 95       	ret

0000026c <usart_serial_putchar>:
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
 26c:	76 c0       	rjmp	.+236    	; 0x35a <usart_putchar>
}
 26e:	08 95       	ret

00000270 <uart_terminal_init>:
 */ 

#include "uart.h"

void uart_terminal_init()
{
 270:	cf 93       	push	r28
 272:	df 93       	push	r29
 274:	cd b7       	in	r28, 0x3d	; 61
 276:	de b7       	in	r29, 0x3e	; 62
 278:	27 97       	sbiw	r28, 0x07	; 7
 27a:	cd bf       	out	0x3d, r28	; 61
 27c:	de bf       	out	0x3e, r29	; 62
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
 27e:	60 e1       	ldi	r22, 0x10	; 16
 280:	83 e0       	ldi	r24, 0x03	; 3
 282:	40 d3       	rcall	.+1664   	; 0x904 <sysclk_enable_module>
		.charlength =	UART_TERMINAL_SERIAL_CHAR_LEN,
		.paritytype =	UART_TERMINAL_SERIAL_PARITY,
		.stopbits	=	UART_TERMINAL_SERIAL_STOP_BIT
	};
	
	UART_TERMINAL_PORT.DIR |= UART_TERMINAL_TX_PIN;	//set the USART transmit pin to output
 284:	e0 e4       	ldi	r30, 0x40	; 64
 286:	f6 e0       	ldi	r31, 0x06	; 6
 288:	80 81       	ld	r24, Z
 28a:	88 60       	ori	r24, 0x08	; 8
 28c:	80 83       	st	Z, r24
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
 28e:	80 ea       	ldi	r24, 0xA0	; 160
 290:	98 e0       	ldi	r25, 0x08	; 8
 292:	80 93 1e 20 	sts	0x201E, r24	; 0x80201e <stdio_base>
 296:	90 93 1f 20 	sts	0x201F, r25	; 0x80201f <stdio_base+0x1>
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
 29a:	86 e3       	ldi	r24, 0x36	; 54
 29c:	91 e0       	ldi	r25, 0x01	; 1
 29e:	80 93 1c 20 	sts	0x201C, r24	; 0x80201c <ptr_put>
 2a2:	90 93 1d 20 	sts	0x201D, r25	; 0x80201d <ptr_put+0x1>
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
 2a6:	8e e2       	ldi	r24, 0x2E	; 46
 2a8:	91 e0       	ldi	r25, 0x01	; 1
 2aa:	80 93 1a 20 	sts	0x201A, r24	; 0x80201a <__data_end>
 2ae:	90 93 1b 20 	sts	0x201B, r25	; 0x80201b <__data_end+0x1>
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
 2b2:	e6 e0       	ldi	r30, 0x06	; 6
 2b4:	f0 e2       	ldi	r31, 0x20	; 32
 2b6:	84 81       	ldd	r24, Z+4	; 0x04
 2b8:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
 2ba:	85 81       	ldd	r24, Z+5	; 0x05
 2bc:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
 2be:	86 81       	ldd	r24, Z+6	; 0x06
 2c0:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
 2c2:	80 81       	ld	r24, Z
 2c4:	91 81       	ldd	r25, Z+1	; 0x01
 2c6:	a2 81       	ldd	r26, Z+2	; 0x02
 2c8:	b3 81       	ldd	r27, Z+3	; 0x03
 2ca:	89 83       	std	Y+1, r24	; 0x01
 2cc:	9a 83       	std	Y+2, r25	; 0x02
 2ce:	ab 83       	std	Y+3, r26	; 0x03
 2d0:	bc 83       	std	Y+4, r27	; 0x04

#ifdef USARTC0
	if((uint16_t)usart == (uint16_t)&USARTC0) {
		sysclk_enable_module(SYSCLK_PORT_C,PR_USART0_bm);
 2d2:	60 e1       	ldi	r22, 0x10	; 16
 2d4:	83 e0       	ldi	r24, 0x03	; 3
 2d6:	16 d3       	rcall	.+1580   	; 0x904 <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
 2d8:	be 01       	movw	r22, r28
 2da:	6f 5f       	subi	r22, 0xFF	; 255
 2dc:	7f 4f       	sbci	r23, 0xFF	; 255
 2de:	80 ea       	ldi	r24, 0xA0	; 160
 2e0:	98 e0       	ldi	r25, 0x08	; 8
 2e2:	58 d1       	rcall	.+688    	; 0x594 <usart_init_rs232>
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
 2e4:	62 e8       	ldi	r22, 0x82	; 130
 2e6:	71 e0       	ldi	r23, 0x01	; 1
 2e8:	8b e9       	ldi	r24, 0x9B	; 155
 2ea:	91 e0       	ldi	r25, 0x01	; 1
 2ec:	dc d3       	rcall	.+1976   	; 0xaa6 <fdevopen>
	
	stdio_serial_init(UART_TERMINAL_SERIAL, &usart_config); //function maps the serial output to printf, not nessecary to know how it works
	
	delay_us(1); //apparently need to slow down before print @32MHz
 2ee:	66 e0       	ldi	r22, 0x06	; 6
 2f0:	70 e0       	ldi	r23, 0x00	; 0
 2f2:	80 e0       	ldi	r24, 0x00	; 0
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	a7 df       	rcall	.-178    	; 0x246 <__portable_avr_delay_cycles>
 2f8:	27 96       	adiw	r28, 0x07	; 7
 2fa:	cd bf       	out	0x3d, r28	; 61
 2fc:	de bf       	out	0x3e, r29	; 62
 2fe:	df 91       	pop	r29
 300:	cf 91       	pop	r28
 302:	08 95       	ret

00000304 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
 304:	cf 93       	push	r28
 306:	df 93       	push	r29
 308:	1f 92       	push	r1
 30a:	cd b7       	in	r28, 0x3d	; 61
 30c:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
 30e:	80 91 1e 20 	lds	r24, 0x201E	; 0x80201e <stdio_base>
 312:	90 91 1f 20 	lds	r25, 0x201F	; 0x80201f <stdio_base+0x1>
 316:	e0 91 1a 20 	lds	r30, 0x201A	; 0x80201a <__data_end>
 31a:	f0 91 1b 20 	lds	r31, 0x201B	; 0x80201b <__data_end+0x1>
 31e:	be 01       	movw	r22, r28
 320:	6f 5f       	subi	r22, 0xFF	; 255
 322:	7f 4f       	sbci	r23, 0xFF	; 255
 324:	19 95       	eicall
	return c;
 326:	89 81       	ldd	r24, Y+1	; 0x01
}
 328:	08 2e       	mov	r0, r24
 32a:	00 0c       	add	r0, r0
 32c:	99 0b       	sbc	r25, r25
 32e:	0f 90       	pop	r0
 330:	df 91       	pop	r29
 332:	cf 91       	pop	r28
 334:	08 95       	ret

00000336 <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
 336:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
 338:	80 91 1e 20 	lds	r24, 0x201E	; 0x80201e <stdio_base>
 33c:	90 91 1f 20 	lds	r25, 0x201F	; 0x80201f <stdio_base+0x1>
 340:	e0 91 1c 20 	lds	r30, 0x201C	; 0x80201c <ptr_put>
 344:	f0 91 1d 20 	lds	r31, 0x201D	; 0x80201d <ptr_put+0x1>
 348:	19 95       	eicall
 34a:	99 23       	and	r25, r25
 34c:	1c f0       	brlt	.+6      	; 0x354 <_write+0x1e>
		return -1;
	}
	return 1;
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
 354:	8f ef       	ldi	r24, 0xFF	; 255
 356:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
 358:	08 95       	ret

0000035a <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
 35a:	fc 01       	movw	r30, r24
 35c:	91 81       	ldd	r25, Z+1	; 0x01
 35e:	95 ff       	sbrs	r25, 5
 360:	fd cf       	rjmp	.-6      	; 0x35c <usart_putchar+0x2>
 362:	60 83       	st	Z, r22
 364:	80 e0       	ldi	r24, 0x00	; 0
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	08 95       	ret

0000036a <usart_getchar>:
 36a:	fc 01       	movw	r30, r24
 36c:	91 81       	ldd	r25, Z+1	; 0x01
 36e:	99 23       	and	r25, r25
 370:	ec f7       	brge	.-6      	; 0x36c <usart_getchar+0x2>
 372:	80 81       	ld	r24, Z
 374:	08 95       	ret

00000376 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
 376:	4f 92       	push	r4
 378:	5f 92       	push	r5
 37a:	6f 92       	push	r6
 37c:	7f 92       	push	r7
 37e:	8f 92       	push	r8
 380:	9f 92       	push	r9
 382:	af 92       	push	r10
 384:	bf 92       	push	r11
 386:	ef 92       	push	r14
 388:	ff 92       	push	r15
 38a:	0f 93       	push	r16
 38c:	1f 93       	push	r17
 38e:	cf 93       	push	r28
 390:	7c 01       	movw	r14, r24
 392:	4a 01       	movw	r8, r20
 394:	5b 01       	movw	r10, r22
 396:	28 01       	movw	r4, r16
 398:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
 39a:	fc 01       	movw	r30, r24
 39c:	84 81       	ldd	r24, Z+4	; 0x04
 39e:	82 ff       	sbrs	r24, 2
 3a0:	16 c0       	rjmp	.+44     	; 0x3ce <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
 3a2:	d9 01       	movw	r26, r18
 3a4:	c8 01       	movw	r24, r16
 3a6:	68 94       	set
 3a8:	12 f8       	bld	r1, 2
 3aa:	b6 95       	lsr	r27
 3ac:	a7 95       	ror	r26
 3ae:	97 95       	ror	r25
 3b0:	87 95       	ror	r24
 3b2:	16 94       	lsr	r1
 3b4:	d1 f7       	brne	.-12     	; 0x3aa <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
 3b6:	b9 01       	movw	r22, r18
 3b8:	a8 01       	movw	r20, r16
 3ba:	03 2e       	mov	r0, r19
 3bc:	36 e1       	ldi	r19, 0x16	; 22
 3be:	76 95       	lsr	r23
 3c0:	67 95       	ror	r22
 3c2:	57 95       	ror	r21
 3c4:	47 95       	ror	r20
 3c6:	3a 95       	dec	r19
 3c8:	d1 f7       	brne	.-12     	; 0x3be <usart_set_baudrate+0x48>
 3ca:	30 2d       	mov	r19, r0
 3cc:	15 c0       	rjmp	.+42     	; 0x3f8 <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
 3ce:	d9 01       	movw	r26, r18
 3d0:	c8 01       	movw	r24, r16
 3d2:	68 94       	set
 3d4:	13 f8       	bld	r1, 3
 3d6:	b6 95       	lsr	r27
 3d8:	a7 95       	ror	r26
 3da:	97 95       	ror	r25
 3dc:	87 95       	ror	r24
 3de:	16 94       	lsr	r1
 3e0:	d1 f7       	brne	.-12     	; 0x3d6 <usart_set_baudrate+0x60>
		min_rate /= 2;
 3e2:	b9 01       	movw	r22, r18
 3e4:	a8 01       	movw	r20, r16
 3e6:	03 2e       	mov	r0, r19
 3e8:	37 e1       	ldi	r19, 0x17	; 23
 3ea:	76 95       	lsr	r23
 3ec:	67 95       	ror	r22
 3ee:	57 95       	ror	r21
 3f0:	47 95       	ror	r20
 3f2:	3a 95       	dec	r19
 3f4:	d1 f7       	brne	.-12     	; 0x3ea <usart_set_baudrate+0x74>
 3f6:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
 3f8:	88 15       	cp	r24, r8
 3fa:	99 05       	cpc	r25, r9
 3fc:	aa 05       	cpc	r26, r10
 3fe:	bb 05       	cpc	r27, r11
 400:	08 f4       	brcc	.+2      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 402:	a2 c0       	rjmp	.+324    	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
 404:	84 16       	cp	r8, r20
 406:	95 06       	cpc	r9, r21
 408:	a6 06       	cpc	r10, r22
 40a:	b7 06       	cpc	r11, r23
 40c:	08 f4       	brcc	.+2      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 40e:	9e c0       	rjmp	.+316    	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
 410:	f7 01       	movw	r30, r14
 412:	84 81       	ldd	r24, Z+4	; 0x04
 414:	82 fd       	sbrc	r24, 2
 416:	04 c0       	rjmp	.+8      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
		baud *= 2;
 418:	88 0c       	add	r8, r8
 41a:	99 1c       	adc	r9, r9
 41c:	aa 1c       	adc	r10, r10
 41e:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
 420:	c3 01       	movw	r24, r6
 422:	b2 01       	movw	r22, r4
 424:	a5 01       	movw	r20, r10
 426:	94 01       	movw	r18, r8
 428:	1c d3       	rcall	.+1592   	; 0xa62 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
 42a:	2f 3f       	cpi	r18, 0xFF	; 255
 42c:	31 05       	cpc	r19, r1
 42e:	41 05       	cpc	r20, r1
 430:	51 05       	cpc	r21, r1
 432:	08 f4       	brcc	.+2      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 434:	8d c0       	rjmp	.+282    	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
 436:	8f ef       	ldi	r24, 0xFF	; 255
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	a0 e0       	ldi	r26, 0x00	; 0
 43c:	b0 e0       	ldi	r27, 0x00	; 0
 43e:	c9 ef       	ldi	r28, 0xF9	; 249
 440:	05 c0       	rjmp	.+10     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 442:	28 17       	cp	r18, r24
 444:	39 07       	cpc	r19, r25
 446:	4a 07       	cpc	r20, r26
 448:	5b 07       	cpc	r21, r27
 44a:	58 f0       	brcs	.+22     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
			break;
		}

		limit <<= 1;
 44c:	88 0f       	add	r24, r24
 44e:	99 1f       	adc	r25, r25
 450:	aa 1f       	adc	r26, r26
 452:	bb 1f       	adc	r27, r27

		if (exp < -3) {
 454:	cd 3f       	cpi	r28, 0xFD	; 253
 456:	0c f4       	brge	.+2      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
			limit |= 1;
 458:	81 60       	ori	r24, 0x01	; 1
 45a:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
 45c:	c7 30       	cpi	r28, 0x07	; 7
 45e:	89 f7       	brne	.-30     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 460:	4d c0       	rjmp	.+154    	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
 462:	cc 23       	and	r28, r28
 464:	0c f0       	brlt	.+2      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 466:	4a c0       	rjmp	.+148    	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
 468:	d5 01       	movw	r26, r10
 46a:	c4 01       	movw	r24, r8
 46c:	88 0f       	add	r24, r24
 46e:	99 1f       	adc	r25, r25
 470:	aa 1f       	adc	r26, r26
 472:	bb 1f       	adc	r27, r27
 474:	88 0f       	add	r24, r24
 476:	99 1f       	adc	r25, r25
 478:	aa 1f       	adc	r26, r26
 47a:	bb 1f       	adc	r27, r27
 47c:	88 0f       	add	r24, r24
 47e:	99 1f       	adc	r25, r25
 480:	aa 1f       	adc	r26, r26
 482:	bb 1f       	adc	r27, r27
 484:	48 1a       	sub	r4, r24
 486:	59 0a       	sbc	r5, r25
 488:	6a 0a       	sbc	r6, r26
 48a:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
 48c:	ce 3f       	cpi	r28, 0xFE	; 254
 48e:	ec f4       	brge	.+58     	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
 490:	8d ef       	ldi	r24, 0xFD	; 253
 492:	9f ef       	ldi	r25, 0xFF	; 255
 494:	8c 1b       	sub	r24, r28
 496:	91 09       	sbc	r25, r1
 498:	c7 fd       	sbrc	r28, 7
 49a:	93 95       	inc	r25
 49c:	04 c0       	rjmp	.+8      	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 49e:	44 0c       	add	r4, r4
 4a0:	55 1c       	adc	r5, r5
 4a2:	66 1c       	adc	r6, r6
 4a4:	77 1c       	adc	r7, r7
 4a6:	8a 95       	dec	r24
 4a8:	d2 f7       	brpl	.-12     	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
 4aa:	d5 01       	movw	r26, r10
 4ac:	c4 01       	movw	r24, r8
 4ae:	b6 95       	lsr	r27
 4b0:	a7 95       	ror	r26
 4b2:	97 95       	ror	r25
 4b4:	87 95       	ror	r24
 4b6:	bc 01       	movw	r22, r24
 4b8:	cd 01       	movw	r24, r26
 4ba:	64 0d       	add	r22, r4
 4bc:	75 1d       	adc	r23, r5
 4be:	86 1d       	adc	r24, r6
 4c0:	97 1d       	adc	r25, r7
 4c2:	a5 01       	movw	r20, r10
 4c4:	94 01       	movw	r18, r8
 4c6:	cd d2       	rcall	.+1434   	; 0xa62 <__udivmodsi4>
 4c8:	35 c0       	rjmp	.+106    	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
		} else {
			baud <<= exp + 3;
 4ca:	83 e0       	ldi	r24, 0x03	; 3
 4cc:	8c 0f       	add	r24, r28
 4ce:	a5 01       	movw	r20, r10
 4d0:	94 01       	movw	r18, r8
 4d2:	04 c0       	rjmp	.+8      	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
 4d4:	22 0f       	add	r18, r18
 4d6:	33 1f       	adc	r19, r19
 4d8:	44 1f       	adc	r20, r20
 4da:	55 1f       	adc	r21, r21
 4dc:	8a 95       	dec	r24
 4de:	d2 f7       	brpl	.-12     	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
			div = (cpu_hz + baud / 2) / baud;
 4e0:	da 01       	movw	r26, r20
 4e2:	c9 01       	movw	r24, r18
 4e4:	b6 95       	lsr	r27
 4e6:	a7 95       	ror	r26
 4e8:	97 95       	ror	r25
 4ea:	87 95       	ror	r24
 4ec:	bc 01       	movw	r22, r24
 4ee:	cd 01       	movw	r24, r26
 4f0:	64 0d       	add	r22, r4
 4f2:	75 1d       	adc	r23, r5
 4f4:	86 1d       	adc	r24, r6
 4f6:	97 1d       	adc	r25, r7
 4f8:	b4 d2       	rcall	.+1384   	; 0xa62 <__udivmodsi4>
 4fa:	1c c0       	rjmp	.+56     	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
 4fc:	83 e0       	ldi	r24, 0x03	; 3
 4fe:	8c 0f       	add	r24, r28
 500:	a5 01       	movw	r20, r10
 502:	94 01       	movw	r18, r8
 504:	04 c0       	rjmp	.+8      	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
 506:	22 0f       	add	r18, r18
 508:	33 1f       	adc	r19, r19
 50a:	44 1f       	adc	r20, r20
 50c:	55 1f       	adc	r21, r21
 50e:	8a 95       	dec	r24
 510:	d2 f7       	brpl	.-12     	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
		div = (cpu_hz + baud / 2) / baud - 1;
 512:	da 01       	movw	r26, r20
 514:	c9 01       	movw	r24, r18
 516:	b6 95       	lsr	r27
 518:	a7 95       	ror	r26
 51a:	97 95       	ror	r25
 51c:	87 95       	ror	r24
 51e:	bc 01       	movw	r22, r24
 520:	cd 01       	movw	r24, r26
 522:	64 0d       	add	r22, r4
 524:	75 1d       	adc	r23, r5
 526:	86 1d       	adc	r24, r6
 528:	97 1d       	adc	r25, r7
 52a:	9b d2       	rcall	.+1334   	; 0xa62 <__udivmodsi4>
 52c:	21 50       	subi	r18, 0x01	; 1
 52e:	31 09       	sbc	r19, r1
 530:	41 09       	sbc	r20, r1
 532:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
 534:	83 2f       	mov	r24, r19
 536:	8f 70       	andi	r24, 0x0F	; 15
 538:	c2 95       	swap	r28
 53a:	c0 7f       	andi	r28, 0xF0	; 240
 53c:	c8 2b       	or	r28, r24
 53e:	f7 01       	movw	r30, r14
 540:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
 542:	26 83       	std	Z+6, r18	; 0x06

	return true;
 544:	81 e0       	ldi	r24, 0x01	; 1
 546:	18 c0       	rjmp	.+48     	; 0x578 <__LOCK_REGION_LENGTH__+0x178>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
 548:	80 e0       	ldi	r24, 0x00	; 0
 54a:	16 c0       	rjmp	.+44     	; 0x578 <__LOCK_REGION_LENGTH__+0x178>
 54c:	80 e0       	ldi	r24, 0x00	; 0
 54e:	14 c0       	rjmp	.+40     	; 0x578 <__LOCK_REGION_LENGTH__+0x178>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
 550:	d5 01       	movw	r26, r10
 552:	c4 01       	movw	r24, r8
 554:	88 0f       	add	r24, r24
 556:	99 1f       	adc	r25, r25
 558:	aa 1f       	adc	r26, r26
 55a:	bb 1f       	adc	r27, r27
 55c:	88 0f       	add	r24, r24
 55e:	99 1f       	adc	r25, r25
 560:	aa 1f       	adc	r26, r26
 562:	bb 1f       	adc	r27, r27
 564:	88 0f       	add	r24, r24
 566:	99 1f       	adc	r25, r25
 568:	aa 1f       	adc	r26, r26
 56a:	bb 1f       	adc	r27, r27
 56c:	48 1a       	sub	r4, r24
 56e:	59 0a       	sbc	r5, r25
 570:	6a 0a       	sbc	r6, r26
 572:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
 574:	c9 ef       	ldi	r28, 0xF9	; 249
 576:	8c cf       	rjmp	.-232    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
 578:	cf 91       	pop	r28
 57a:	1f 91       	pop	r17
 57c:	0f 91       	pop	r16
 57e:	ff 90       	pop	r15
 580:	ef 90       	pop	r14
 582:	bf 90       	pop	r11
 584:	af 90       	pop	r10
 586:	9f 90       	pop	r9
 588:	8f 90       	pop	r8
 58a:	7f 90       	pop	r7
 58c:	6f 90       	pop	r6
 58e:	5f 90       	pop	r5
 590:	4f 90       	pop	r4
 592:	08 95       	ret

00000594 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
 594:	0f 93       	push	r16
 596:	1f 93       	push	r17
 598:	cf 93       	push	r28
 59a:	df 93       	push	r29
 59c:	ec 01       	movw	r28, r24
 59e:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
 5a0:	00 97       	sbiw	r24, 0x00	; 0
 5a2:	09 f4       	brne	.+2      	; 0x5a6 <usart_init_rs232+0x12>
 5a4:	36 c1       	rjmp	.+620    	; 0x812 <usart_init_rs232+0x27e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
 5a6:	80 3c       	cpi	r24, 0xC0	; 192
 5a8:	91 05       	cpc	r25, r1
 5aa:	21 f4       	brne	.+8      	; 0x5b4 <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
 5ac:	60 e1       	ldi	r22, 0x10	; 16
 5ae:	80 e0       	ldi	r24, 0x00	; 0
 5b0:	a9 d1       	rcall	.+850    	; 0x904 <sysclk_enable_module>
 5b2:	2f c1       	rjmp	.+606    	; 0x812 <usart_init_rs232+0x27e>
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
 5b4:	c0 34       	cpi	r28, 0x40	; 64
 5b6:	84 e0       	ldi	r24, 0x04	; 4
 5b8:	d8 07       	cpc	r29, r24
 5ba:	21 f4       	brne	.+8      	; 0x5c4 <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
 5bc:	68 e0       	ldi	r22, 0x08	; 8
 5be:	80 e0       	ldi	r24, 0x00	; 0
 5c0:	a1 d1       	rcall	.+834    	; 0x904 <sysclk_enable_module>
 5c2:	27 c1       	rjmp	.+590    	; 0x812 <usart_init_rs232+0x27e>
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
 5c4:	c1 15       	cp	r28, r1
 5c6:	e4 e0       	ldi	r30, 0x04	; 4
 5c8:	de 07       	cpc	r29, r30
 5ca:	21 f4       	brne	.+8      	; 0x5d4 <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
 5cc:	64 e0       	ldi	r22, 0x04	; 4
 5ce:	80 e0       	ldi	r24, 0x00	; 0
 5d0:	99 d1       	rcall	.+818    	; 0x904 <sysclk_enable_module>
 5d2:	1f c1       	rjmp	.+574    	; 0x812 <usart_init_rs232+0x27e>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
 5d4:	c0 38       	cpi	r28, 0x80	; 128
 5d6:	f1 e0       	ldi	r31, 0x01	; 1
 5d8:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
 5da:	21 f4       	brne	.+8      	; 0x5e4 <usart_init_rs232+0x50>
 5dc:	62 e0       	ldi	r22, 0x02	; 2
 5de:	80 e0       	ldi	r24, 0x00	; 0
 5e0:	91 d1       	rcall	.+802    	; 0x904 <sysclk_enable_module>
 5e2:	17 c1       	rjmp	.+558    	; 0x812 <usart_init_rs232+0x27e>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
 5e4:	c1 15       	cp	r28, r1
 5e6:	81 e0       	ldi	r24, 0x01	; 1
 5e8:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
 5ea:	21 f4       	brne	.+8      	; 0x5f4 <usart_init_rs232+0x60>
 5ec:	61 e0       	ldi	r22, 0x01	; 1
 5ee:	80 e0       	ldi	r24, 0x00	; 0
 5f0:	89 d1       	rcall	.+786    	; 0x904 <sysclk_enable_module>
 5f2:	0f c1       	rjmp	.+542    	; 0x812 <usart_init_rs232+0x27e>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
 5f4:	c0 38       	cpi	r28, 0x80	; 128
 5f6:	e3 e0       	ldi	r30, 0x03	; 3
 5f8:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
 5fa:	21 f4       	brne	.+8      	; 0x604 <usart_init_rs232+0x70>
 5fc:	61 e0       	ldi	r22, 0x01	; 1
 5fe:	81 e0       	ldi	r24, 0x01	; 1
 600:	81 d1       	rcall	.+770    	; 0x904 <sysclk_enable_module>
 602:	07 c1       	rjmp	.+526    	; 0x812 <usart_init_rs232+0x27e>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
 604:	c0 39       	cpi	r28, 0x90	; 144
 606:	f3 e0       	ldi	r31, 0x03	; 3
 608:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
 60a:	21 f4       	brne	.+8      	; 0x614 <usart_init_rs232+0x80>
 60c:	61 e0       	ldi	r22, 0x01	; 1
 60e:	82 e0       	ldi	r24, 0x02	; 2
 610:	79 d1       	rcall	.+754    	; 0x904 <sysclk_enable_module>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
 612:	ff c0       	rjmp	.+510    	; 0x812 <usart_init_rs232+0x27e>
 614:	c1 15       	cp	r28, r1
 616:	82 e0       	ldi	r24, 0x02	; 2
 618:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
 61a:	21 f4       	brne	.+8      	; 0x624 <usart_init_rs232+0x90>
 61c:	62 e0       	ldi	r22, 0x02	; 2
 61e:	81 e0       	ldi	r24, 0x01	; 1
 620:	71 d1       	rcall	.+738    	; 0x904 <sysclk_enable_module>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
 622:	f7 c0       	rjmp	.+494    	; 0x812 <usart_init_rs232+0x27e>
 624:	c0 34       	cpi	r28, 0x40	; 64
 626:	e2 e0       	ldi	r30, 0x02	; 2
 628:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
 62a:	21 f4       	brne	.+8      	; 0x634 <usart_init_rs232+0xa0>
 62c:	62 e0       	ldi	r22, 0x02	; 2
 62e:	82 e0       	ldi	r24, 0x02	; 2
 630:	69 d1       	rcall	.+722    	; 0x904 <sysclk_enable_module>
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
 632:	ef c0       	rjmp	.+478    	; 0x812 <usart_init_rs232+0x27e>
 634:	c1 15       	cp	r28, r1
 636:	f3 e0       	ldi	r31, 0x03	; 3
 638:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
 63a:	21 f4       	brne	.+8      	; 0x644 <usart_init_rs232+0xb0>
 63c:	64 e0       	ldi	r22, 0x04	; 4
 63e:	81 e0       	ldi	r24, 0x01	; 1
 640:	61 d1       	rcall	.+706    	; 0x904 <sysclk_enable_module>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
 642:	e7 c0       	rjmp	.+462    	; 0x812 <usart_init_rs232+0x27e>
 644:	c0 32       	cpi	r28, 0x20	; 32
 646:	83 e0       	ldi	r24, 0x03	; 3
 648:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
 64a:	21 f4       	brne	.+8      	; 0x654 <usart_init_rs232+0xc0>
 64c:	64 e0       	ldi	r22, 0x04	; 4
 64e:	82 e0       	ldi	r24, 0x02	; 2
 650:	59 d1       	rcall	.+690    	; 0x904 <sysclk_enable_module>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
 652:	df c0       	rjmp	.+446    	; 0x812 <usart_init_rs232+0x27e>
 654:	c1 15       	cp	r28, r1
 656:	e8 e0       	ldi	r30, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
 658:	de 07       	cpc	r29, r30
 65a:	21 f4       	brne	.+8      	; 0x664 <usart_init_rs232+0xd0>
 65c:	61 e0       	ldi	r22, 0x01	; 1
 65e:	83 e0       	ldi	r24, 0x03	; 3
 660:	51 d1       	rcall	.+674    	; 0x904 <sysclk_enable_module>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
 662:	d7 c0       	rjmp	.+430    	; 0x812 <usart_init_rs232+0x27e>
 664:	c1 15       	cp	r28, r1
 666:	f9 e0       	ldi	r31, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
 668:	df 07       	cpc	r29, r31
 66a:	21 f4       	brne	.+8      	; 0x674 <usart_init_rs232+0xe0>
 66c:	61 e0       	ldi	r22, 0x01	; 1
 66e:	84 e0       	ldi	r24, 0x04	; 4
 670:	49 d1       	rcall	.+658    	; 0x904 <sysclk_enable_module>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
 672:	cf c0       	rjmp	.+414    	; 0x812 <usart_init_rs232+0x27e>
 674:	c1 15       	cp	r28, r1
 676:	8a e0       	ldi	r24, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
 678:	d8 07       	cpc	r29, r24
 67a:	21 f4       	brne	.+8      	; 0x684 <usart_init_rs232+0xf0>
 67c:	61 e0       	ldi	r22, 0x01	; 1
 67e:	85 e0       	ldi	r24, 0x05	; 5
 680:	41 d1       	rcall	.+642    	; 0x904 <sysclk_enable_module>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
 682:	c7 c0       	rjmp	.+398    	; 0x812 <usart_init_rs232+0x27e>
 684:	c1 15       	cp	r28, r1
 686:	eb e0       	ldi	r30, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
 688:	de 07       	cpc	r29, r30
 68a:	21 f4       	brne	.+8      	; 0x694 <usart_init_rs232+0x100>
 68c:	61 e0       	ldi	r22, 0x01	; 1
 68e:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
 690:	39 d1       	rcall	.+626    	; 0x904 <sysclk_enable_module>
 692:	bf c0       	rjmp	.+382    	; 0x812 <usart_init_rs232+0x27e>
 694:	c0 34       	cpi	r28, 0x40	; 64
 696:	f8 e0       	ldi	r31, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
 698:	df 07       	cpc	r29, r31
 69a:	21 f4       	brne	.+8      	; 0x6a4 <usart_init_rs232+0x110>
 69c:	62 e0       	ldi	r22, 0x02	; 2
 69e:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
 6a0:	31 d1       	rcall	.+610    	; 0x904 <sysclk_enable_module>
 6a2:	b7 c0       	rjmp	.+366    	; 0x812 <usart_init_rs232+0x27e>
 6a4:	c0 34       	cpi	r28, 0x40	; 64
 6a6:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
 6a8:	d8 07       	cpc	r29, r24
 6aa:	21 f4       	brne	.+8      	; 0x6b4 <usart_init_rs232+0x120>
 6ac:	62 e0       	ldi	r22, 0x02	; 2
 6ae:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
 6b0:	29 d1       	rcall	.+594    	; 0x904 <sysclk_enable_module>
 6b2:	af c0       	rjmp	.+350    	; 0x812 <usart_init_rs232+0x27e>
 6b4:	c0 34       	cpi	r28, 0x40	; 64
 6b6:	ea e0       	ldi	r30, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
 6b8:	de 07       	cpc	r29, r30
 6ba:	21 f4       	brne	.+8      	; 0x6c4 <usart_init_rs232+0x130>
 6bc:	62 e0       	ldi	r22, 0x02	; 2
 6be:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
 6c0:	21 d1       	rcall	.+578    	; 0x904 <sysclk_enable_module>
 6c2:	a7 c0       	rjmp	.+334    	; 0x812 <usart_init_rs232+0x27e>
 6c4:	c0 34       	cpi	r28, 0x40	; 64
 6c6:	fb e0       	ldi	r31, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
 6c8:	df 07       	cpc	r29, r31
 6ca:	21 f4       	brne	.+8      	; 0x6d4 <usart_init_rs232+0x140>
 6cc:	62 e0       	ldi	r22, 0x02	; 2
 6ce:	86 e0       	ldi	r24, 0x06	; 6
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
 6d0:	19 d1       	rcall	.+562    	; 0x904 <sysclk_enable_module>
 6d2:	9f c0       	rjmp	.+318    	; 0x812 <usart_init_rs232+0x27e>
 6d4:	c0 39       	cpi	r28, 0x90	; 144
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
 6d6:	88 e0       	ldi	r24, 0x08	; 8
 6d8:	d8 07       	cpc	r29, r24
 6da:	21 f4       	brne	.+8      	; 0x6e4 <usart_init_rs232+0x150>
 6dc:	64 e0       	ldi	r22, 0x04	; 4
 6de:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
 6e0:	11 d1       	rcall	.+546    	; 0x904 <sysclk_enable_module>
 6e2:	97 c0       	rjmp	.+302    	; 0x812 <usart_init_rs232+0x27e>
 6e4:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
 6e6:	e9 e0       	ldi	r30, 0x09	; 9
 6e8:	de 07       	cpc	r29, r30
 6ea:	21 f4       	brne	.+8      	; 0x6f4 <usart_init_rs232+0x160>
 6ec:	64 e0       	ldi	r22, 0x04	; 4
 6ee:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
 6f0:	09 d1       	rcall	.+530    	; 0x904 <sysclk_enable_module>
 6f2:	8f c0       	rjmp	.+286    	; 0x812 <usart_init_rs232+0x27e>
 6f4:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
 6f6:	fa e0       	ldi	r31, 0x0A	; 10
 6f8:	df 07       	cpc	r29, r31
 6fa:	21 f4       	brne	.+8      	; 0x704 <usart_init_rs232+0x170>
 6fc:	64 e0       	ldi	r22, 0x04	; 4
 6fe:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
 700:	01 d1       	rcall	.+514    	; 0x904 <sysclk_enable_module>
 702:	87 c0       	rjmp	.+270    	; 0x812 <usart_init_rs232+0x27e>
 704:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
 706:	8b e0       	ldi	r24, 0x0B	; 11
 708:	d8 07       	cpc	r29, r24
 70a:	21 f4       	brne	.+8      	; 0x714 <usart_init_rs232+0x180>
 70c:	64 e0       	ldi	r22, 0x04	; 4
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
 70e:	86 e0       	ldi	r24, 0x06	; 6
 710:	f9 d0       	rcall	.+498    	; 0x904 <sysclk_enable_module>
 712:	7f c0       	rjmp	.+254    	; 0x812 <usart_init_rs232+0x27e>
 714:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
 716:	e8 e0       	ldi	r30, 0x08	; 8
 718:	de 07       	cpc	r29, r30
 71a:	21 f4       	brne	.+8      	; 0x724 <usart_init_rs232+0x190>
 71c:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
 71e:	83 e0       	ldi	r24, 0x03	; 3
 720:	f1 d0       	rcall	.+482    	; 0x904 <sysclk_enable_module>
 722:	77 c0       	rjmp	.+238    	; 0x812 <usart_init_rs232+0x27e>
 724:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
 726:	f9 e0       	ldi	r31, 0x09	; 9
 728:	df 07       	cpc	r29, r31
 72a:	21 f4       	brne	.+8      	; 0x734 <usart_init_rs232+0x1a0>
 72c:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
 72e:	84 e0       	ldi	r24, 0x04	; 4
 730:	e9 d0       	rcall	.+466    	; 0x904 <sysclk_enable_module>
 732:	6f c0       	rjmp	.+222    	; 0x812 <usart_init_rs232+0x27e>
 734:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
 736:	8a e0       	ldi	r24, 0x0A	; 10
 738:	d8 07       	cpc	r29, r24
 73a:	21 f4       	brne	.+8      	; 0x744 <usart_init_rs232+0x1b0>
 73c:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
 73e:	85 e0       	ldi	r24, 0x05	; 5
 740:	e1 d0       	rcall	.+450    	; 0x904 <sysclk_enable_module>
 742:	67 c0       	rjmp	.+206    	; 0x812 <usart_init_rs232+0x27e>
 744:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
 746:	eb e0       	ldi	r30, 0x0B	; 11
 748:	de 07       	cpc	r29, r30
 74a:	21 f4       	brne	.+8      	; 0x754 <usart_init_rs232+0x1c0>
 74c:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
 74e:	86 e0       	ldi	r24, 0x06	; 6
 750:	d9 d0       	rcall	.+434    	; 0x904 <sysclk_enable_module>
 752:	5f c0       	rjmp	.+190    	; 0x812 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
 754:	c0 3a       	cpi	r28, 0xA0	; 160
 756:	f8 e0       	ldi	r31, 0x08	; 8
 758:	df 07       	cpc	r29, r31
 75a:	21 f4       	brne	.+8      	; 0x764 <usart_init_rs232+0x1d0>
 75c:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
 75e:	83 e0       	ldi	r24, 0x03	; 3
 760:	d1 d0       	rcall	.+418    	; 0x904 <sysclk_enable_module>
 762:	57 c0       	rjmp	.+174    	; 0x812 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
 764:	c0 3a       	cpi	r28, 0xA0	; 160
 766:	89 e0       	ldi	r24, 0x09	; 9
 768:	d8 07       	cpc	r29, r24
 76a:	21 f4       	brne	.+8      	; 0x774 <usart_init_rs232+0x1e0>
 76c:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
 76e:	84 e0       	ldi	r24, 0x04	; 4
 770:	c9 d0       	rcall	.+402    	; 0x904 <sysclk_enable_module>
 772:	4f c0       	rjmp	.+158    	; 0x812 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
 774:	c0 3a       	cpi	r28, 0xA0	; 160
 776:	ea e0       	ldi	r30, 0x0A	; 10
 778:	de 07       	cpc	r29, r30
 77a:	21 f4       	brne	.+8      	; 0x784 <usart_init_rs232+0x1f0>
 77c:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
 77e:	85 e0       	ldi	r24, 0x05	; 5
 780:	c1 d0       	rcall	.+386    	; 0x904 <sysclk_enable_module>
 782:	47 c0       	rjmp	.+142    	; 0x812 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
 784:	c0 3a       	cpi	r28, 0xA0	; 160
 786:	fb e0       	ldi	r31, 0x0B	; 11
 788:	df 07       	cpc	r29, r31
 78a:	21 f4       	brne	.+8      	; 0x794 <usart_init_rs232+0x200>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
 78c:	60 e1       	ldi	r22, 0x10	; 16
 78e:	86 e0       	ldi	r24, 0x06	; 6
 790:	b9 d0       	rcall	.+370    	; 0x904 <sysclk_enable_module>
 792:	3f c0       	rjmp	.+126    	; 0x812 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
 794:	c0 3b       	cpi	r28, 0xB0	; 176
 796:	88 e0       	ldi	r24, 0x08	; 8
 798:	d8 07       	cpc	r29, r24
 79a:	21 f4       	brne	.+8      	; 0x7a4 <usart_init_rs232+0x210>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
 79c:	60 e2       	ldi	r22, 0x20	; 32
 79e:	83 e0       	ldi	r24, 0x03	; 3
 7a0:	b1 d0       	rcall	.+354    	; 0x904 <sysclk_enable_module>
 7a2:	37 c0       	rjmp	.+110    	; 0x812 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
 7a4:	c0 3b       	cpi	r28, 0xB0	; 176
 7a6:	e9 e0       	ldi	r30, 0x09	; 9
 7a8:	de 07       	cpc	r29, r30
 7aa:	21 f4       	brne	.+8      	; 0x7b4 <usart_init_rs232+0x220>
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
 7ac:	60 e2       	ldi	r22, 0x20	; 32
 7ae:	84 e0       	ldi	r24, 0x04	; 4
 7b0:	a9 d0       	rcall	.+338    	; 0x904 <sysclk_enable_module>
 7b2:	2f c0       	rjmp	.+94     	; 0x812 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
 7b4:	c0 3b       	cpi	r28, 0xB0	; 176
 7b6:	fa e0       	ldi	r31, 0x0A	; 10
 7b8:	df 07       	cpc	r29, r31
 7ba:	21 f4       	brne	.+8      	; 0x7c4 <usart_init_rs232+0x230>
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
 7bc:	60 e2       	ldi	r22, 0x20	; 32
 7be:	85 e0       	ldi	r24, 0x05	; 5
 7c0:	a1 d0       	rcall	.+322    	; 0x904 <sysclk_enable_module>
 7c2:	27 c0       	rjmp	.+78     	; 0x812 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
 7c4:	c0 3b       	cpi	r28, 0xB0	; 176
 7c6:	8b e0       	ldi	r24, 0x0B	; 11
 7c8:	d8 07       	cpc	r29, r24
 7ca:	21 f4       	brne	.+8      	; 0x7d4 <usart_init_rs232+0x240>
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
 7cc:	60 e2       	ldi	r22, 0x20	; 32
 7ce:	86 e0       	ldi	r24, 0x06	; 6
 7d0:	99 d0       	rcall	.+306    	; 0x904 <sysclk_enable_module>
 7d2:	1f c0       	rjmp	.+62     	; 0x812 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
 7d4:	c0 38       	cpi	r28, 0x80	; 128
 7d6:	e4 e0       	ldi	r30, 0x04	; 4
 7d8:	de 07       	cpc	r29, r30
 7da:	21 f4       	brne	.+8      	; 0x7e4 <usart_init_rs232+0x250>
 7dc:	60 e4       	ldi	r22, 0x40	; 64
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
 7de:	83 e0       	ldi	r24, 0x03	; 3
 7e0:	91 d0       	rcall	.+290    	; 0x904 <sysclk_enable_module>
 7e2:	17 c0       	rjmp	.+46     	; 0x812 <usart_init_rs232+0x27e>
 7e4:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
 7e6:	f4 e0       	ldi	r31, 0x04	; 4
 7e8:	df 07       	cpc	r29, r31
 7ea:	21 f4       	brne	.+8      	; 0x7f4 <usart_init_rs232+0x260>
 7ec:	60 e4       	ldi	r22, 0x40	; 64
 7ee:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
 7f0:	89 d0       	rcall	.+274    	; 0x904 <sysclk_enable_module>
 7f2:	0f c0       	rjmp	.+30     	; 0x812 <usart_init_rs232+0x27e>
 7f4:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
 7f6:	84 e0       	ldi	r24, 0x04	; 4
 7f8:	d8 07       	cpc	r29, r24
 7fa:	21 f4       	brne	.+8      	; 0x804 <usart_init_rs232+0x270>
 7fc:	60 e4       	ldi	r22, 0x40	; 64
 7fe:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
 800:	81 d0       	rcall	.+258    	; 0x904 <sysclk_enable_module>
 802:	07 c0       	rjmp	.+14     	; 0x812 <usart_init_rs232+0x27e>
 804:	c0 3b       	cpi	r28, 0xB0	; 176
 806:	e4 e0       	ldi	r30, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
 808:	de 07       	cpc	r29, r30
 80a:	19 f4       	brne	.+6      	; 0x812 <usart_init_rs232+0x27e>
 80c:	60 e4       	ldi	r22, 0x40	; 64
 80e:	86 e0       	ldi	r24, 0x06	; 6
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
 810:	79 d0       	rcall	.+242    	; 0x904 <sysclk_enable_module>
 812:	8d 81       	ldd	r24, Y+5	; 0x05
 814:	8f 73       	andi	r24, 0x3F	; 63
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
 816:	8d 83       	std	Y+5, r24	; 0x05
 818:	f8 01       	movw	r30, r16
 81a:	95 81       	ldd	r25, Z+5	; 0x05
 81c:	84 81       	ldd	r24, Z+4	; 0x04
 81e:	89 2b       	or	r24, r25
 820:	96 81       	ldd	r25, Z+6	; 0x06
 822:	91 11       	cpse	r25, r1
 824:	98 e0       	ldi	r25, 0x08	; 8
 826:	89 2b       	or	r24, r25
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
 828:	8d 83       	std	Y+5, r24	; 0x05
 82a:	f8 01       	movw	r30, r16
 82c:	40 81       	ld	r20, Z
 82e:	51 81       	ldd	r21, Z+1	; 0x01
 830:	62 81       	ldd	r22, Z+2	; 0x02
 832:	73 81       	ldd	r23, Z+3	; 0x03
 834:	00 e0       	ldi	r16, 0x00	; 0
 836:	18 e4       	ldi	r17, 0x48	; 72
 838:	28 ee       	ldi	r18, 0xE8	; 232
 83a:	31 e0       	ldi	r19, 0x01	; 1
 83c:	ce 01       	movw	r24, r28
 83e:	9b dd       	rcall	.-1226   	; 0x376 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
 840:	9c 81       	ldd	r25, Y+4	; 0x04
 842:	98 60       	ori	r25, 0x08	; 8
 844:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
 846:	9c 81       	ldd	r25, Y+4	; 0x04
 848:	90 61       	ori	r25, 0x10	; 16
 84a:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
 84c:	df 91       	pop	r29
 84e:	cf 91       	pop	r28
 850:	1f 91       	pop	r17
 852:	0f 91       	pop	r16
 854:	08 95       	ret

00000856 <__vector_47>:
}


//This interrupt is called each time the timer/counter overflows
ISR(TCE0_OVF_vect)
{
 856:	1f 92       	push	r1
 858:	0f 92       	push	r0
 85a:	0f b6       	in	r0, 0x3f	; 63
 85c:	0f 92       	push	r0
 85e:	11 24       	eor	r1, r1
 860:	08 b6       	in	r0, 0x38	; 56
 862:	0f 92       	push	r0
 864:	18 be       	out	0x38, r1	; 56
 866:	0b b6       	in	r0, 0x3b	; 59
 868:	0f 92       	push	r0
 86a:	1b be       	out	0x3b, r1	; 59
 86c:	8f 93       	push	r24
 86e:	9f 93       	push	r25
 870:	ef 93       	push	r30
 872:	ff 93       	push	r31
	PORTQ.OUT ^= 0x08;	//toggle LED0 on the xplained board
 874:	e0 ec       	ldi	r30, 0xC0	; 192
 876:	f7 e0       	ldi	r31, 0x07	; 7
 878:	94 81       	ldd	r25, Z+4	; 0x04
 87a:	88 e0       	ldi	r24, 0x08	; 8
 87c:	89 27       	eor	r24, r25
 87e:	84 83       	std	Z+4, r24	; 0x04
}
 880:	ff 91       	pop	r31
 882:	ef 91       	pop	r30
 884:	9f 91       	pop	r25
 886:	8f 91       	pop	r24
 888:	0f 90       	pop	r0
 88a:	0b be       	out	0x3b, r0	; 59
 88c:	0f 90       	pop	r0
 88e:	08 be       	out	0x38, r0	; 56
 890:	0f 90       	pop	r0
 892:	0f be       	out	0x3f, r0	; 63
 894:	0f 90       	pop	r0
 896:	1f 90       	pop	r1
 898:	18 95       	reti

0000089a <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
 89a:	cf 93       	push	r28
 89c:	df 93       	push	r29
 89e:	1f 92       	push	r1
 8a0:	1f 92       	push	r1
 8a2:	cd b7       	in	r28, 0x3d	; 61
 8a4:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
 8a6:	8f ef       	ldi	r24, 0xFF	; 255
 8a8:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
 8ac:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
 8b0:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
 8b4:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
 8b8:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
 8bc:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
 8c0:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
 8c4:	8f b7       	in	r24, 0x3f	; 63
 8c6:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
 8c8:	f8 94       	cli
	return flags;
 8ca:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
 8cc:	e0 e5       	ldi	r30, 0x50	; 80
 8ce:	f0 e0       	ldi	r31, 0x00	; 0
 8d0:	80 81       	ld	r24, Z
 8d2:	82 60       	ori	r24, 0x02	; 2
 8d4:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 8d6:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
 8d8:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
 8da:	81 ff       	sbrs	r24, 1
 8dc:	fd cf       	rjmp	.-6      	; 0x8d8 <sysclk_init+0x3e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
 8de:	61 e0       	ldi	r22, 0x01	; 1
 8e0:	80 e4       	ldi	r24, 0x40	; 64
 8e2:	90 e0       	ldi	r25, 0x00	; 0
 8e4:	25 d0       	rcall	.+74     	; 0x930 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
 8e6:	8f b7       	in	r24, 0x3f	; 63
 8e8:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
 8ea:	f8 94       	cli
	return flags;
 8ec:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
 8ee:	e0 e5       	ldi	r30, 0x50	; 80
 8f0:	f0 e0       	ldi	r31, 0x00	; 0
 8f2:	80 81       	ld	r24, Z
 8f4:	8e 7f       	andi	r24, 0xFE	; 254
 8f6:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 8f8:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
 8fa:	0f 90       	pop	r0
 8fc:	0f 90       	pop	r0
 8fe:	df 91       	pop	r29
 900:	cf 91       	pop	r28
 902:	08 95       	ret

00000904 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
 904:	cf 93       	push	r28
 906:	df 93       	push	r29
 908:	1f 92       	push	r1
 90a:	cd b7       	in	r28, 0x3d	; 61
 90c:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
 90e:	9f b7       	in	r25, 0x3f	; 63
 910:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
 912:	f8 94       	cli
	return flags;
 914:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
 916:	e8 2f       	mov	r30, r24
 918:	f0 e0       	ldi	r31, 0x00	; 0
 91a:	e0 59       	subi	r30, 0x90	; 144
 91c:	ff 4f       	sbci	r31, 0xFF	; 255
 91e:	60 95       	com	r22
 920:	80 81       	ld	r24, Z
 922:	68 23       	and	r22, r24
 924:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 926:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
 928:	0f 90       	pop	r0
 92a:	df 91       	pop	r29
 92c:	cf 91       	pop	r28
 92e:	08 95       	ret

00000930 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
 930:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
 932:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
 934:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
 936:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
 938:	60 83       	st	Z, r22
	ret                             // Return to caller
 93a:	08 95       	ret

0000093c <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
 93c:	cf 93       	push	r28
 93e:	df 93       	push	r29
 940:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
 942:	20 e0       	ldi	r18, 0x00	; 0
 944:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
 946:	c6 2f       	mov	r28, r22
 948:	d0 e0       	ldi	r29, 0x00	; 0
 94a:	de 01       	movw	r26, r28
 94c:	02 2e       	mov	r0, r18
 94e:	02 c0       	rjmp	.+4      	; 0x954 <ioport_configure_port_pin+0x18>
 950:	b5 95       	asr	r27
 952:	a7 95       	ror	r26
 954:	0a 94       	dec	r0
 956:	e2 f7       	brpl	.-8      	; 0x950 <ioport_configure_port_pin+0x14>
 958:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
 95a:	50 8b       	std	Z+16, r21	; 0x10
 95c:	2f 5f       	subi	r18, 0xFF	; 255
 95e:	3f 4f       	sbci	r19, 0xFF	; 255
 960:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
 962:	28 30       	cpi	r18, 0x08	; 8
 964:	31 05       	cpc	r19, r1
 966:	89 f7       	brne	.-30     	; 0x94a <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
 968:	40 ff       	sbrs	r20, 0
 96a:	0a c0       	rjmp	.+20     	; 0x980 <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
 96c:	41 ff       	sbrs	r20, 1
 96e:	03 c0       	rjmp	.+6      	; 0x976 <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
 970:	fc 01       	movw	r30, r24
 972:	65 83       	std	Z+5, r22	; 0x05
 974:	02 c0       	rjmp	.+4      	; 0x97a <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
 976:	fc 01       	movw	r30, r24
 978:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
 97a:	fc 01       	movw	r30, r24
 97c:	61 83       	std	Z+1, r22	; 0x01
 97e:	02 c0       	rjmp	.+4      	; 0x984 <ioport_configure_port_pin+0x48>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
 980:	fc 01       	movw	r30, r24
 982:	62 83       	std	Z+2, r22	; 0x02
	}
}
 984:	df 91       	pop	r29
 986:	cf 91       	pop	r28
 988:	08 95       	ret

0000098a <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
 98a:	43 e0       	ldi	r20, 0x03	; 3
 98c:	50 e0       	ldi	r21, 0x00	; 0
 98e:	68 e0       	ldi	r22, 0x08	; 8
 990:	80 ec       	ldi	r24, 0xC0	; 192
 992:	97 e0       	ldi	r25, 0x07	; 7
 994:	d3 df       	rcall	.-90     	; 0x93c <ioport_configure_port_pin>
 996:	40 e0       	ldi	r20, 0x00	; 0
 998:	58 e1       	ldi	r21, 0x18	; 24
 99a:	64 e0       	ldi	r22, 0x04	; 4
 99c:	80 ec       	ldi	r24, 0xC0	; 192
 99e:	97 e0       	ldi	r25, 0x07	; 7
 9a0:	cd cf       	rjmp	.-102    	; 0x93c <ioport_configure_port_pin>
 9a2:	08 95       	ret

000009a4 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
 9a4:	04 c0       	rjmp	.+8      	; 0x9ae <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
 9a6:	61 50       	subi	r22, 0x01	; 1
 9a8:	71 09       	sbc	r23, r1
 9aa:	81 09       	sbc	r24, r1
 9ac:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
 9ae:	61 15       	cp	r22, r1
 9b0:	71 05       	cpc	r23, r1
 9b2:	81 05       	cpc	r24, r1
 9b4:	91 05       	cpc	r25, r1
 9b6:	b9 f7       	brne	.-18     	; 0x9a6 <__portable_avr_delay_cycles+0x2>
 9b8:	08 95       	ret

000009ba <main>:
void TCE0_init(uint16_t period);
void initialize_interrupt(void);

int main (void)
{
	board_init();
 9ba:	e7 df       	rcall	.-50     	; 0x98a <board_init>

	/* Insert application code here, after the board has been initialized. */
	sysclk_init();
 9bc:	6e df       	rcall	.-292    	; 0x89a <sysclk_init>
// 	
// 	
// 	sei();
// 	
// 	PORTQ.DIR = 0x08; // sets the LED on PORTQ pin 3 to output	
	uart_terminal_init();
 9be:	58 dc       	rcall	.-1872   	; 0x270 <uart_terminal_init>
	printf("hello\n");
 9c0:	8d e0       	ldi	r24, 0x0D	; 13
 9c2:	90 e2       	ldi	r25, 0x20	; 32
 9c4:	ba d0       	rcall	.+372    	; 0xb3a <puts>
	printf("world\n");
 9c6:	83 e1       	ldi	r24, 0x13	; 19
 9c8:	90 e2       	ldi	r25, 0x20	; 32
 9ca:	b7 d0       	rcall	.+366    	; 0xb3a <puts>
 9cc:	ff cf       	rjmp	.-2      	; 0x9cc <main+0x12>

000009ce <__vector_66>:
 9ce:	1f 92       	push	r1
	
	//never go here pls
}

ISR(PORTA_INT0_vect)
{
 9d0:	0f 92       	push	r0
 9d2:	0f b6       	in	r0, 0x3f	; 63
 9d4:	0f 92       	push	r0
 9d6:	11 24       	eor	r1, r1
 9d8:	08 b6       	in	r0, 0x38	; 56
 9da:	0f 92       	push	r0
 9dc:	18 be       	out	0x38, r1	; 56
 9de:	09 b6       	in	r0, 0x39	; 57
 9e0:	0f 92       	push	r0
 9e2:	19 be       	out	0x39, r1	; 57
 9e4:	0a b6       	in	r0, 0x3a	; 58
 9e6:	0f 92       	push	r0
 9e8:	1a be       	out	0x3a, r1	; 58
 9ea:	0b b6       	in	r0, 0x3b	; 59
 9ec:	0f 92       	push	r0
 9ee:	1b be       	out	0x3b, r1	; 59
 9f0:	1f 93       	push	r17
 9f2:	2f 93       	push	r18
 9f4:	3f 93       	push	r19
 9f6:	4f 93       	push	r20
 9f8:	5f 93       	push	r21
 9fa:	6f 93       	push	r22
 9fc:	7f 93       	push	r23
 9fe:	8f 93       	push	r24
 a00:	9f 93       	push	r25
 a02:	af 93       	push	r26
 a04:	bf 93       	push	r27
 a06:	cf 93       	push	r28
 a08:	df 93       	push	r29
 a0a:	ef 93       	push	r30
 a0c:	ff 93       	push	r31
	PORTQ.OUT ^= 0x08; // Toggle the LED on PortQ
 a0e:	c0 ec       	ldi	r28, 0xC0	; 192
 a10:	d7 e0       	ldi	r29, 0x07	; 7
 a12:	8c 81       	ldd	r24, Y+4	; 0x04
 a14:	18 e0       	ldi	r17, 0x08	; 8
 a16:	81 27       	eor	r24, r17
 a18:	8c 83       	std	Y+4, r24	; 0x04
	delay_ms(100);
 a1a:	66 e5       	ldi	r22, 0x56	; 86
 a1c:	73 e2       	ldi	r23, 0x23	; 35
 a1e:	88 e0       	ldi	r24, 0x08	; 8
 a20:	90 e0       	ldi	r25, 0x00	; 0
 a22:	c0 df       	rcall	.-128    	; 0x9a4 <__portable_avr_delay_cycles>
	PORTQ.OUT ^= 0x08; // toggle the LED again
 a24:	8c 81       	ldd	r24, Y+4	; 0x04
 a26:	18 27       	eor	r17, r24
 a28:	1c 83       	std	Y+4, r17	; 0x04
}
 a2a:	ff 91       	pop	r31
 a2c:	ef 91       	pop	r30
 a2e:	df 91       	pop	r29
 a30:	cf 91       	pop	r28
 a32:	bf 91       	pop	r27
 a34:	af 91       	pop	r26
 a36:	9f 91       	pop	r25
 a38:	8f 91       	pop	r24
 a3a:	7f 91       	pop	r23
 a3c:	6f 91       	pop	r22
 a3e:	5f 91       	pop	r21
 a40:	4f 91       	pop	r20
 a42:	3f 91       	pop	r19
 a44:	2f 91       	pop	r18
 a46:	1f 91       	pop	r17
 a48:	0f 90       	pop	r0
 a4a:	0b be       	out	0x3b, r0	; 59
 a4c:	0f 90       	pop	r0
 a4e:	0a be       	out	0x3a, r0	; 58
 a50:	0f 90       	pop	r0
 a52:	09 be       	out	0x39, r0	; 57
 a54:	0f 90       	pop	r0
 a56:	08 be       	out	0x38, r0	; 56
 a58:	0f 90       	pop	r0
 a5a:	0f be       	out	0x3f, r0	; 63
 a5c:	0f 90       	pop	r0
 a5e:	1f 90       	pop	r1
 a60:	18 95       	reti

00000a62 <__udivmodsi4>:
 a62:	a1 e2       	ldi	r26, 0x21	; 33
 a64:	1a 2e       	mov	r1, r26
 a66:	aa 1b       	sub	r26, r26
 a68:	bb 1b       	sub	r27, r27
 a6a:	fd 01       	movw	r30, r26
 a6c:	0d c0       	rjmp	.+26     	; 0xa88 <__udivmodsi4_ep>

00000a6e <__udivmodsi4_loop>:
 a6e:	aa 1f       	adc	r26, r26
 a70:	bb 1f       	adc	r27, r27
 a72:	ee 1f       	adc	r30, r30
 a74:	ff 1f       	adc	r31, r31
 a76:	a2 17       	cp	r26, r18
 a78:	b3 07       	cpc	r27, r19
 a7a:	e4 07       	cpc	r30, r20
 a7c:	f5 07       	cpc	r31, r21
 a7e:	20 f0       	brcs	.+8      	; 0xa88 <__udivmodsi4_ep>
 a80:	a2 1b       	sub	r26, r18
 a82:	b3 0b       	sbc	r27, r19
 a84:	e4 0b       	sbc	r30, r20
 a86:	f5 0b       	sbc	r31, r21

00000a88 <__udivmodsi4_ep>:
 a88:	66 1f       	adc	r22, r22
 a8a:	77 1f       	adc	r23, r23
 a8c:	88 1f       	adc	r24, r24
 a8e:	99 1f       	adc	r25, r25
 a90:	1a 94       	dec	r1
 a92:	69 f7       	brne	.-38     	; 0xa6e <__udivmodsi4_loop>
 a94:	60 95       	com	r22
 a96:	70 95       	com	r23
 a98:	80 95       	com	r24
 a9a:	90 95       	com	r25
 a9c:	9b 01       	movw	r18, r22
 a9e:	ac 01       	movw	r20, r24
 aa0:	bd 01       	movw	r22, r26
 aa2:	cf 01       	movw	r24, r30
 aa4:	08 95       	ret

00000aa6 <fdevopen>:
 aa6:	0f 93       	push	r16
 aa8:	1f 93       	push	r17
 aaa:	cf 93       	push	r28
 aac:	df 93       	push	r29
 aae:	00 97       	sbiw	r24, 0x00	; 0
 ab0:	31 f4       	brne	.+12     	; 0xabe <fdevopen+0x18>
 ab2:	61 15       	cp	r22, r1
 ab4:	71 05       	cpc	r23, r1
 ab6:	19 f4       	brne	.+6      	; 0xabe <fdevopen+0x18>
 ab8:	80 e0       	ldi	r24, 0x00	; 0
 aba:	90 e0       	ldi	r25, 0x00	; 0
 abc:	39 c0       	rjmp	.+114    	; 0xb30 <fdevopen+0x8a>
 abe:	8b 01       	movw	r16, r22
 ac0:	ec 01       	movw	r28, r24
 ac2:	6e e0       	ldi	r22, 0x0E	; 14
 ac4:	70 e0       	ldi	r23, 0x00	; 0
 ac6:	81 e0       	ldi	r24, 0x01	; 1
 ac8:	90 e0       	ldi	r25, 0x00	; 0
 aca:	67 d0       	rcall	.+206    	; 0xb9a <calloc>
 acc:	fc 01       	movw	r30, r24
 ace:	89 2b       	or	r24, r25
 ad0:	99 f3       	breq	.-26     	; 0xab8 <fdevopen+0x12>
 ad2:	80 e8       	ldi	r24, 0x80	; 128
 ad4:	83 83       	std	Z+3, r24	; 0x03
 ad6:	01 15       	cp	r16, r1
 ad8:	11 05       	cpc	r17, r1
 ada:	71 f0       	breq	.+28     	; 0xaf8 <fdevopen+0x52>
 adc:	02 87       	std	Z+10, r16	; 0x0a
 ade:	13 87       	std	Z+11, r17	; 0x0b
 ae0:	81 e8       	ldi	r24, 0x81	; 129
 ae2:	83 83       	std	Z+3, r24	; 0x03
 ae4:	80 91 20 20 	lds	r24, 0x2020	; 0x802020 <__iob>
 ae8:	90 91 21 20 	lds	r25, 0x2021	; 0x802021 <__iob+0x1>
 aec:	89 2b       	or	r24, r25
 aee:	21 f4       	brne	.+8      	; 0xaf8 <fdevopen+0x52>
 af0:	e0 93 20 20 	sts	0x2020, r30	; 0x802020 <__iob>
 af4:	f0 93 21 20 	sts	0x2021, r31	; 0x802021 <__iob+0x1>
 af8:	20 97       	sbiw	r28, 0x00	; 0
 afa:	c9 f0       	breq	.+50     	; 0xb2e <fdevopen+0x88>
 afc:	c0 87       	std	Z+8, r28	; 0x08
 afe:	d1 87       	std	Z+9, r29	; 0x09
 b00:	83 81       	ldd	r24, Z+3	; 0x03
 b02:	82 60       	ori	r24, 0x02	; 2
 b04:	83 83       	std	Z+3, r24	; 0x03
 b06:	80 91 22 20 	lds	r24, 0x2022	; 0x802022 <__iob+0x2>
 b0a:	90 91 23 20 	lds	r25, 0x2023	; 0x802023 <__iob+0x3>
 b0e:	89 2b       	or	r24, r25
 b10:	71 f4       	brne	.+28     	; 0xb2e <fdevopen+0x88>
 b12:	e0 93 22 20 	sts	0x2022, r30	; 0x802022 <__iob+0x2>
 b16:	f0 93 23 20 	sts	0x2023, r31	; 0x802023 <__iob+0x3>
 b1a:	80 91 24 20 	lds	r24, 0x2024	; 0x802024 <__iob+0x4>
 b1e:	90 91 25 20 	lds	r25, 0x2025	; 0x802025 <__iob+0x5>
 b22:	89 2b       	or	r24, r25
 b24:	21 f4       	brne	.+8      	; 0xb2e <fdevopen+0x88>
 b26:	e0 93 24 20 	sts	0x2024, r30	; 0x802024 <__iob+0x4>
 b2a:	f0 93 25 20 	sts	0x2025, r31	; 0x802025 <__iob+0x5>
 b2e:	cf 01       	movw	r24, r30
 b30:	df 91       	pop	r29
 b32:	cf 91       	pop	r28
 b34:	1f 91       	pop	r17
 b36:	0f 91       	pop	r16
 b38:	08 95       	ret

00000b3a <puts>:
 b3a:	0f 93       	push	r16
 b3c:	1f 93       	push	r17
 b3e:	cf 93       	push	r28
 b40:	df 93       	push	r29
 b42:	e0 91 22 20 	lds	r30, 0x2022	; 0x802022 <__iob+0x2>
 b46:	f0 91 23 20 	lds	r31, 0x2023	; 0x802023 <__iob+0x3>
 b4a:	23 81       	ldd	r18, Z+3	; 0x03
 b4c:	21 ff       	sbrs	r18, 1
 b4e:	1b c0       	rjmp	.+54     	; 0xb86 <puts+0x4c>
 b50:	8c 01       	movw	r16, r24
 b52:	d0 e0       	ldi	r29, 0x00	; 0
 b54:	c0 e0       	ldi	r28, 0x00	; 0
 b56:	f8 01       	movw	r30, r16
 b58:	81 91       	ld	r24, Z+
 b5a:	8f 01       	movw	r16, r30
 b5c:	60 91 22 20 	lds	r22, 0x2022	; 0x802022 <__iob+0x2>
 b60:	70 91 23 20 	lds	r23, 0x2023	; 0x802023 <__iob+0x3>
 b64:	db 01       	movw	r26, r22
 b66:	18 96       	adiw	r26, 0x08	; 8
 b68:	ed 91       	ld	r30, X+
 b6a:	fc 91       	ld	r31, X
 b6c:	19 97       	sbiw	r26, 0x09	; 9
 b6e:	88 23       	and	r24, r24
 b70:	31 f0       	breq	.+12     	; 0xb7e <puts+0x44>
 b72:	19 95       	eicall
 b74:	89 2b       	or	r24, r25
 b76:	79 f3       	breq	.-34     	; 0xb56 <puts+0x1c>
 b78:	df ef       	ldi	r29, 0xFF	; 255
 b7a:	cf ef       	ldi	r28, 0xFF	; 255
 b7c:	ec cf       	rjmp	.-40     	; 0xb56 <puts+0x1c>
 b7e:	8a e0       	ldi	r24, 0x0A	; 10
 b80:	19 95       	eicall
 b82:	89 2b       	or	r24, r25
 b84:	19 f0       	breq	.+6      	; 0xb8c <puts+0x52>
 b86:	8f ef       	ldi	r24, 0xFF	; 255
 b88:	9f ef       	ldi	r25, 0xFF	; 255
 b8a:	02 c0       	rjmp	.+4      	; 0xb90 <puts+0x56>
 b8c:	8d 2f       	mov	r24, r29
 b8e:	9c 2f       	mov	r25, r28
 b90:	df 91       	pop	r29
 b92:	cf 91       	pop	r28
 b94:	1f 91       	pop	r17
 b96:	0f 91       	pop	r16
 b98:	08 95       	ret

00000b9a <calloc>:
 b9a:	0f 93       	push	r16
 b9c:	1f 93       	push	r17
 b9e:	cf 93       	push	r28
 ba0:	df 93       	push	r29
 ba2:	86 9f       	mul	r24, r22
 ba4:	80 01       	movw	r16, r0
 ba6:	87 9f       	mul	r24, r23
 ba8:	10 0d       	add	r17, r0
 baa:	96 9f       	mul	r25, r22
 bac:	10 0d       	add	r17, r0
 bae:	11 24       	eor	r1, r1
 bb0:	c8 01       	movw	r24, r16
 bb2:	0d d0       	rcall	.+26     	; 0xbce <malloc>
 bb4:	ec 01       	movw	r28, r24
 bb6:	00 97       	sbiw	r24, 0x00	; 0
 bb8:	21 f0       	breq	.+8      	; 0xbc2 <calloc+0x28>
 bba:	a8 01       	movw	r20, r16
 bbc:	60 e0       	ldi	r22, 0x00	; 0
 bbe:	70 e0       	ldi	r23, 0x00	; 0
 bc0:	27 d1       	rcall	.+590    	; 0xe10 <memset>
 bc2:	ce 01       	movw	r24, r28
 bc4:	df 91       	pop	r29
 bc6:	cf 91       	pop	r28
 bc8:	1f 91       	pop	r17
 bca:	0f 91       	pop	r16
 bcc:	08 95       	ret

00000bce <malloc>:
 bce:	0f 93       	push	r16
 bd0:	1f 93       	push	r17
 bd2:	cf 93       	push	r28
 bd4:	df 93       	push	r29
 bd6:	82 30       	cpi	r24, 0x02	; 2
 bd8:	91 05       	cpc	r25, r1
 bda:	10 f4       	brcc	.+4      	; 0xbe0 <malloc+0x12>
 bdc:	82 e0       	ldi	r24, 0x02	; 2
 bde:	90 e0       	ldi	r25, 0x00	; 0
 be0:	e0 91 28 20 	lds	r30, 0x2028	; 0x802028 <__flp>
 be4:	f0 91 29 20 	lds	r31, 0x2029	; 0x802029 <__flp+0x1>
 be8:	20 e0       	ldi	r18, 0x00	; 0
 bea:	30 e0       	ldi	r19, 0x00	; 0
 bec:	a0 e0       	ldi	r26, 0x00	; 0
 bee:	b0 e0       	ldi	r27, 0x00	; 0
 bf0:	30 97       	sbiw	r30, 0x00	; 0
 bf2:	19 f1       	breq	.+70     	; 0xc3a <malloc+0x6c>
 bf4:	40 81       	ld	r20, Z
 bf6:	51 81       	ldd	r21, Z+1	; 0x01
 bf8:	02 81       	ldd	r16, Z+2	; 0x02
 bfa:	13 81       	ldd	r17, Z+3	; 0x03
 bfc:	48 17       	cp	r20, r24
 bfe:	59 07       	cpc	r21, r25
 c00:	c8 f0       	brcs	.+50     	; 0xc34 <malloc+0x66>
 c02:	84 17       	cp	r24, r20
 c04:	95 07       	cpc	r25, r21
 c06:	69 f4       	brne	.+26     	; 0xc22 <malloc+0x54>
 c08:	10 97       	sbiw	r26, 0x00	; 0
 c0a:	31 f0       	breq	.+12     	; 0xc18 <malloc+0x4a>
 c0c:	12 96       	adiw	r26, 0x02	; 2
 c0e:	0c 93       	st	X, r16
 c10:	12 97       	sbiw	r26, 0x02	; 2
 c12:	13 96       	adiw	r26, 0x03	; 3
 c14:	1c 93       	st	X, r17
 c16:	27 c0       	rjmp	.+78     	; 0xc66 <malloc+0x98>
 c18:	00 93 28 20 	sts	0x2028, r16	; 0x802028 <__flp>
 c1c:	10 93 29 20 	sts	0x2029, r17	; 0x802029 <__flp+0x1>
 c20:	22 c0       	rjmp	.+68     	; 0xc66 <malloc+0x98>
 c22:	21 15       	cp	r18, r1
 c24:	31 05       	cpc	r19, r1
 c26:	19 f0       	breq	.+6      	; 0xc2e <malloc+0x60>
 c28:	42 17       	cp	r20, r18
 c2a:	53 07       	cpc	r21, r19
 c2c:	18 f4       	brcc	.+6      	; 0xc34 <malloc+0x66>
 c2e:	9a 01       	movw	r18, r20
 c30:	bd 01       	movw	r22, r26
 c32:	ef 01       	movw	r28, r30
 c34:	df 01       	movw	r26, r30
 c36:	f8 01       	movw	r30, r16
 c38:	db cf       	rjmp	.-74     	; 0xbf0 <malloc+0x22>
 c3a:	21 15       	cp	r18, r1
 c3c:	31 05       	cpc	r19, r1
 c3e:	f9 f0       	breq	.+62     	; 0xc7e <malloc+0xb0>
 c40:	28 1b       	sub	r18, r24
 c42:	39 0b       	sbc	r19, r25
 c44:	24 30       	cpi	r18, 0x04	; 4
 c46:	31 05       	cpc	r19, r1
 c48:	80 f4       	brcc	.+32     	; 0xc6a <malloc+0x9c>
 c4a:	8a 81       	ldd	r24, Y+2	; 0x02
 c4c:	9b 81       	ldd	r25, Y+3	; 0x03
 c4e:	61 15       	cp	r22, r1
 c50:	71 05       	cpc	r23, r1
 c52:	21 f0       	breq	.+8      	; 0xc5c <malloc+0x8e>
 c54:	fb 01       	movw	r30, r22
 c56:	82 83       	std	Z+2, r24	; 0x02
 c58:	93 83       	std	Z+3, r25	; 0x03
 c5a:	04 c0       	rjmp	.+8      	; 0xc64 <malloc+0x96>
 c5c:	80 93 28 20 	sts	0x2028, r24	; 0x802028 <__flp>
 c60:	90 93 29 20 	sts	0x2029, r25	; 0x802029 <__flp+0x1>
 c64:	fe 01       	movw	r30, r28
 c66:	32 96       	adiw	r30, 0x02	; 2
 c68:	44 c0       	rjmp	.+136    	; 0xcf2 <malloc+0x124>
 c6a:	fe 01       	movw	r30, r28
 c6c:	e2 0f       	add	r30, r18
 c6e:	f3 1f       	adc	r31, r19
 c70:	81 93       	st	Z+, r24
 c72:	91 93       	st	Z+, r25
 c74:	22 50       	subi	r18, 0x02	; 2
 c76:	31 09       	sbc	r19, r1
 c78:	28 83       	st	Y, r18
 c7a:	39 83       	std	Y+1, r19	; 0x01
 c7c:	3a c0       	rjmp	.+116    	; 0xcf2 <malloc+0x124>
 c7e:	20 91 26 20 	lds	r18, 0x2026	; 0x802026 <__brkval>
 c82:	30 91 27 20 	lds	r19, 0x2027	; 0x802027 <__brkval+0x1>
 c86:	23 2b       	or	r18, r19
 c88:	41 f4       	brne	.+16     	; 0xc9a <malloc+0xcc>
 c8a:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
 c8e:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
 c92:	20 93 26 20 	sts	0x2026, r18	; 0x802026 <__brkval>
 c96:	30 93 27 20 	sts	0x2027, r19	; 0x802027 <__brkval+0x1>
 c9a:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
 c9e:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
 ca2:	21 15       	cp	r18, r1
 ca4:	31 05       	cpc	r19, r1
 ca6:	41 f4       	brne	.+16     	; 0xcb8 <malloc+0xea>
 ca8:	2d b7       	in	r18, 0x3d	; 61
 caa:	3e b7       	in	r19, 0x3e	; 62
 cac:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
 cb0:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
 cb4:	24 1b       	sub	r18, r20
 cb6:	35 0b       	sbc	r19, r21
 cb8:	e0 91 26 20 	lds	r30, 0x2026	; 0x802026 <__brkval>
 cbc:	f0 91 27 20 	lds	r31, 0x2027	; 0x802027 <__brkval+0x1>
 cc0:	e2 17       	cp	r30, r18
 cc2:	f3 07       	cpc	r31, r19
 cc4:	a0 f4       	brcc	.+40     	; 0xcee <malloc+0x120>
 cc6:	2e 1b       	sub	r18, r30
 cc8:	3f 0b       	sbc	r19, r31
 cca:	28 17       	cp	r18, r24
 ccc:	39 07       	cpc	r19, r25
 cce:	78 f0       	brcs	.+30     	; 0xcee <malloc+0x120>
 cd0:	ac 01       	movw	r20, r24
 cd2:	4e 5f       	subi	r20, 0xFE	; 254
 cd4:	5f 4f       	sbci	r21, 0xFF	; 255
 cd6:	24 17       	cp	r18, r20
 cd8:	35 07       	cpc	r19, r21
 cda:	48 f0       	brcs	.+18     	; 0xcee <malloc+0x120>
 cdc:	4e 0f       	add	r20, r30
 cde:	5f 1f       	adc	r21, r31
 ce0:	40 93 26 20 	sts	0x2026, r20	; 0x802026 <__brkval>
 ce4:	50 93 27 20 	sts	0x2027, r21	; 0x802027 <__brkval+0x1>
 ce8:	81 93       	st	Z+, r24
 cea:	91 93       	st	Z+, r25
 cec:	02 c0       	rjmp	.+4      	; 0xcf2 <malloc+0x124>
 cee:	e0 e0       	ldi	r30, 0x00	; 0
 cf0:	f0 e0       	ldi	r31, 0x00	; 0
 cf2:	cf 01       	movw	r24, r30
 cf4:	df 91       	pop	r29
 cf6:	cf 91       	pop	r28
 cf8:	1f 91       	pop	r17
 cfa:	0f 91       	pop	r16
 cfc:	08 95       	ret

00000cfe <free>:
 cfe:	cf 93       	push	r28
 d00:	df 93       	push	r29
 d02:	00 97       	sbiw	r24, 0x00	; 0
 d04:	09 f4       	brne	.+2      	; 0xd08 <free+0xa>
 d06:	81 c0       	rjmp	.+258    	; 0xe0a <free+0x10c>
 d08:	fc 01       	movw	r30, r24
 d0a:	32 97       	sbiw	r30, 0x02	; 2
 d0c:	12 82       	std	Z+2, r1	; 0x02
 d0e:	13 82       	std	Z+3, r1	; 0x03
 d10:	a0 91 28 20 	lds	r26, 0x2028	; 0x802028 <__flp>
 d14:	b0 91 29 20 	lds	r27, 0x2029	; 0x802029 <__flp+0x1>
 d18:	10 97       	sbiw	r26, 0x00	; 0
 d1a:	81 f4       	brne	.+32     	; 0xd3c <free+0x3e>
 d1c:	20 81       	ld	r18, Z
 d1e:	31 81       	ldd	r19, Z+1	; 0x01
 d20:	82 0f       	add	r24, r18
 d22:	93 1f       	adc	r25, r19
 d24:	20 91 26 20 	lds	r18, 0x2026	; 0x802026 <__brkval>
 d28:	30 91 27 20 	lds	r19, 0x2027	; 0x802027 <__brkval+0x1>
 d2c:	28 17       	cp	r18, r24
 d2e:	39 07       	cpc	r19, r25
 d30:	51 f5       	brne	.+84     	; 0xd86 <free+0x88>
 d32:	e0 93 26 20 	sts	0x2026, r30	; 0x802026 <__brkval>
 d36:	f0 93 27 20 	sts	0x2027, r31	; 0x802027 <__brkval+0x1>
 d3a:	67 c0       	rjmp	.+206    	; 0xe0a <free+0x10c>
 d3c:	ed 01       	movw	r28, r26
 d3e:	20 e0       	ldi	r18, 0x00	; 0
 d40:	30 e0       	ldi	r19, 0x00	; 0
 d42:	ce 17       	cp	r28, r30
 d44:	df 07       	cpc	r29, r31
 d46:	40 f4       	brcc	.+16     	; 0xd58 <free+0x5a>
 d48:	4a 81       	ldd	r20, Y+2	; 0x02
 d4a:	5b 81       	ldd	r21, Y+3	; 0x03
 d4c:	9e 01       	movw	r18, r28
 d4e:	41 15       	cp	r20, r1
 d50:	51 05       	cpc	r21, r1
 d52:	f1 f0       	breq	.+60     	; 0xd90 <free+0x92>
 d54:	ea 01       	movw	r28, r20
 d56:	f5 cf       	rjmp	.-22     	; 0xd42 <free+0x44>
 d58:	c2 83       	std	Z+2, r28	; 0x02
 d5a:	d3 83       	std	Z+3, r29	; 0x03
 d5c:	40 81       	ld	r20, Z
 d5e:	51 81       	ldd	r21, Z+1	; 0x01
 d60:	84 0f       	add	r24, r20
 d62:	95 1f       	adc	r25, r21
 d64:	c8 17       	cp	r28, r24
 d66:	d9 07       	cpc	r29, r25
 d68:	59 f4       	brne	.+22     	; 0xd80 <free+0x82>
 d6a:	88 81       	ld	r24, Y
 d6c:	99 81       	ldd	r25, Y+1	; 0x01
 d6e:	84 0f       	add	r24, r20
 d70:	95 1f       	adc	r25, r21
 d72:	02 96       	adiw	r24, 0x02	; 2
 d74:	80 83       	st	Z, r24
 d76:	91 83       	std	Z+1, r25	; 0x01
 d78:	8a 81       	ldd	r24, Y+2	; 0x02
 d7a:	9b 81       	ldd	r25, Y+3	; 0x03
 d7c:	82 83       	std	Z+2, r24	; 0x02
 d7e:	93 83       	std	Z+3, r25	; 0x03
 d80:	21 15       	cp	r18, r1
 d82:	31 05       	cpc	r19, r1
 d84:	29 f4       	brne	.+10     	; 0xd90 <free+0x92>
 d86:	e0 93 28 20 	sts	0x2028, r30	; 0x802028 <__flp>
 d8a:	f0 93 29 20 	sts	0x2029, r31	; 0x802029 <__flp+0x1>
 d8e:	3d c0       	rjmp	.+122    	; 0xe0a <free+0x10c>
 d90:	e9 01       	movw	r28, r18
 d92:	ea 83       	std	Y+2, r30	; 0x02
 d94:	fb 83       	std	Y+3, r31	; 0x03
 d96:	49 91       	ld	r20, Y+
 d98:	59 91       	ld	r21, Y+
 d9a:	c4 0f       	add	r28, r20
 d9c:	d5 1f       	adc	r29, r21
 d9e:	ec 17       	cp	r30, r28
 da0:	fd 07       	cpc	r31, r29
 da2:	61 f4       	brne	.+24     	; 0xdbc <free+0xbe>
 da4:	80 81       	ld	r24, Z
 da6:	91 81       	ldd	r25, Z+1	; 0x01
 da8:	84 0f       	add	r24, r20
 daa:	95 1f       	adc	r25, r21
 dac:	02 96       	adiw	r24, 0x02	; 2
 dae:	e9 01       	movw	r28, r18
 db0:	88 83       	st	Y, r24
 db2:	99 83       	std	Y+1, r25	; 0x01
 db4:	82 81       	ldd	r24, Z+2	; 0x02
 db6:	93 81       	ldd	r25, Z+3	; 0x03
 db8:	8a 83       	std	Y+2, r24	; 0x02
 dba:	9b 83       	std	Y+3, r25	; 0x03
 dbc:	e0 e0       	ldi	r30, 0x00	; 0
 dbe:	f0 e0       	ldi	r31, 0x00	; 0
 dc0:	12 96       	adiw	r26, 0x02	; 2
 dc2:	8d 91       	ld	r24, X+
 dc4:	9c 91       	ld	r25, X
 dc6:	13 97       	sbiw	r26, 0x03	; 3
 dc8:	00 97       	sbiw	r24, 0x00	; 0
 dca:	19 f0       	breq	.+6      	; 0xdd2 <free+0xd4>
 dcc:	fd 01       	movw	r30, r26
 dce:	dc 01       	movw	r26, r24
 dd0:	f7 cf       	rjmp	.-18     	; 0xdc0 <free+0xc2>
 dd2:	8d 91       	ld	r24, X+
 dd4:	9c 91       	ld	r25, X
 dd6:	11 97       	sbiw	r26, 0x01	; 1
 dd8:	9d 01       	movw	r18, r26
 dda:	2e 5f       	subi	r18, 0xFE	; 254
 ddc:	3f 4f       	sbci	r19, 0xFF	; 255
 dde:	82 0f       	add	r24, r18
 de0:	93 1f       	adc	r25, r19
 de2:	20 91 26 20 	lds	r18, 0x2026	; 0x802026 <__brkval>
 de6:	30 91 27 20 	lds	r19, 0x2027	; 0x802027 <__brkval+0x1>
 dea:	28 17       	cp	r18, r24
 dec:	39 07       	cpc	r19, r25
 dee:	69 f4       	brne	.+26     	; 0xe0a <free+0x10c>
 df0:	30 97       	sbiw	r30, 0x00	; 0
 df2:	29 f4       	brne	.+10     	; 0xdfe <free+0x100>
 df4:	10 92 28 20 	sts	0x2028, r1	; 0x802028 <__flp>
 df8:	10 92 29 20 	sts	0x2029, r1	; 0x802029 <__flp+0x1>
 dfc:	02 c0       	rjmp	.+4      	; 0xe02 <free+0x104>
 dfe:	12 82       	std	Z+2, r1	; 0x02
 e00:	13 82       	std	Z+3, r1	; 0x03
 e02:	a0 93 26 20 	sts	0x2026, r26	; 0x802026 <__brkval>
 e06:	b0 93 27 20 	sts	0x2027, r27	; 0x802027 <__brkval+0x1>
 e0a:	df 91       	pop	r29
 e0c:	cf 91       	pop	r28
 e0e:	08 95       	ret

00000e10 <memset>:
 e10:	dc 01       	movw	r26, r24
 e12:	01 c0       	rjmp	.+2      	; 0xe16 <memset+0x6>
 e14:	6d 93       	st	X+, r22
 e16:	41 50       	subi	r20, 0x01	; 1
 e18:	50 40       	sbci	r21, 0x00	; 0
 e1a:	e0 f7       	brcc	.-8      	; 0xe14 <memset+0x4>
 e1c:	08 95       	ret

00000e1e <_exit>:
 e1e:	f8 94       	cli

00000e20 <__stop_program>:
 e20:	ff cf       	rjmp	.-2      	; 0xe20 <__stop_program>
